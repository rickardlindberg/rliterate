{
"children":[
{
"children":[
{
"children":[],
"id":"7f14d9ec23c0425c89039ea68dfdac16",
"paragraphs":[
{
"fragments":[
{
"text":"The main GUI consists of the table of contents and the workspace.",
"type":"text"
}
],
"id":"b6e497d472eb452abac8b8dc8088299a",
"type":"text"
},
{
"fragments":[
{
"text":"The main GUI window.",
"type":"text"
}
],
"id":"452c70dc6fbb4fe4a141c6d0f3256ad7",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"The table of contents shows the outline of the document, and from it, pages can be opened in the workspace. Each page is drawn with a border in the workspace.",
"type":"text"
}
],
"id":"185944c233fe4e599ae37321ec100c37",
"type":"text"
}
],
"title":"Main GUI"
},
{
"children":[],
"id":"6c34776183394824824be039e65de531",
"paragraphs":[
{
"fragments":[
{
"text":"Code paragraphs enable literate programming.",
"type":"text"
}
],
"id":"65ead2c5a424420b8b5368c046f2af52",
"type":"text"
}
],
"title":"Literate programming"
},
{
"children":[],
"id":"3ad55f274f724ebab8cea5d5c63d8dc0",
"paragraphs":[
{
"fragments":[
{
"text":"RLiterate is not only a tool for authoring documents, but also a tool for reading documents. The following features support that.",
"type":"text"
}
],
"id":"0e82720d665642f69b79b2e35234cf99",
"type":"text"
},
{
"fragments":[
{
"text":"Hoisting a page in the table of contents allows you to ",
"type":"text"
},
{
"text":"focus on a subset",
"type":"strong"
},
{
"text":" of the document.",
"type":"text"
}
],
"id":"394402716d9b45e195298f16a6d4c8d5",
"type":"text"
},
{
"fragments":[
{
"text":"Page 1",
"type":"emphasis"
},
{
"text":" hoisted.",
"type":"text"
}
],
"id":"3cfd7226484843f4afc2ee903d445ba4",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Openining a page and all immediate children allows you to read a subset of the document ",
"type":"text"
},
{
"text":"breath first",
"type":"strong"
},
{
"text":". It's like reading only the first section of each chapter in an entire book.",
"type":"text"
}
],
"id":"359a25b33d5645b69be21e54b5b78abe",
"type":"text"
},
{
"fragments":[
{
"text":"Demo",
"type":"emphasis"
},
{
"text":" page with its children opened. Notice that ",
"type":"text"
},
{
"text":"Sub page",
"type":"emphasis"
},
{
"text":" is not an immediate child and therefore not shown.",
"type":"text"
}
],
"id":"123363ac02b44f87a1627f6b02482bd5",
"image_base64":"",
"type":"image"
}
],
"title":"Reading tool"
}
],
"id":"600aa145cf474a6aa732a4c4edb5f44b",
"paragraphs":[
{
"fragments":[
{
"text":"This chapter gives an overview of what types of document you can create with RLiterate.",
"type":"text"
}
],
"id":"570a8f432f324f14a23db6ede35af90f",
"type":"text"
},
{
"fragments":[
{
"text":"RLiterate documents have pages organized in a hierarchy. Pages have a title and paragraphs. Paragraphs can be of different types. The different paragraph types is what make RLiterate documents special. Code paragraphs for example enable literate programming by allowing chunks of code to be defined and then be automatically assembled into the final source file. Text paragraphs are used for writing prose. RLiterate documents can also be exported to different formats for display in different mediums.",
"type":"text"
}
],
"id":"fb1a6842fe1f4642a2aa21113a2ad179",
"type":"text"
}
],
"title":"A tour of RLiterate"
},
{
"children":[],
"id":"cc3c314da5a944d18eec6628eb042ba0",
"paragraphs":[
{
"fragments":[
{
"text":"The source code for RLiterate is in a Git repository hosted on Github:",
"type":"text"
}
],
"id":"f5029036eb0347f5a82eef2977c5e4de",
"type":"text"
},
{
"fragments":[
{
"text":"",
"type":"link",
"url":"https://github.com/rickardlindberg/rliterate"
}
],
"id":"0fe88db54e06426c9ba1c0d56c805646",
"type":"text"
},
{
"fragments":[
{
"text":"Assuming you have Git installed, you can clone the repository like this:",
"type":"text"
}
],
"id":"65e84cfe8d7c4cc4952e1bd7781fb0a7",
"type":"text"
},
{
"id":"a4c5fe6e80f145408404bb06dd744ee3",
"path":[
""
],
"text":"git clone https://github.com/rickardlindberg/rliterate.git",
"type":"code"
},
{
"fragments":[
{
"text":"Before you can run RLiterate, you need ",
"type":"text"
},
{
"text":"Python",
"type":"link",
"url":"https://www.python.org/"
},
{
"text":" with the following libraries installed:",
"type":"text"
}
],
"id":"1779778497c3405ea45d42a56b83ea16",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"wxPython",
"type":"link",
"url":"https://wxpython.org/"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"pygments",
"type":"link",
"url":"http://pygments.org/"
}
]
}
],
"id":"aaf20f16695b4631b91c4be4603be57a",
"type":"list"
},
{
"fragments":[
{
"text":"Here is how they can be installed on a Fedora system:",
"type":"text"
}
],
"id":"75359fa579334b61b95a06dd761ed58e",
"type":"text"
},
{
"id":"447febdb2f2043ab8c4d2a86b88a2992",
"path":[
""
],
"text":"dnf install python wxPython python2-pygments",
"type":"code"
},
{
"fragments":[
{
"text":"Once they are installed, you can run RLiterate like this:",
"type":"text"
}
],
"id":"e74c1810431b42aaae8b65755e5ff313",
"type":"text"
},
{
"id":"401185e82e054680b963f5397275eabb",
"path":[
""
],
"text":"python rliterate.py rliterate.rliterate\n",
"type":"code"
},
{
"fragments":[
{
"text":"This will open the RLiterate document. Enter a different filename as last parameter to create a new document.",
"type":"text"
}
],
"id":"f6da445ecc2549a0862270dfb2171ed6",
"type":"text"
}
],
"title":"Installing"
},
{
"children":[
{
"children":[],
"id":"85bb3ad476d540bb8b6bfed905d158f0",
"paragraphs":[
{
"fragments":[
{
"text":"When ",
"type":"text"
},
{
"text":"*.rliterate",
"type":"code"
},
{
"text":" files are version controlled, the textual diff is hard to read. This problem can be sovled in Git by defining a textconv command that converts the ",
"type":"text"
},
{
"text":"*.rliterate",
"type":"code"
},
{
"text":" file to text that is suitable for diffing. The ",
"type":"text"
},
{
"text":"--diff",
"type":"code"
},
{
"text":" option to RLiterate outputs a file in a diff friendly format.",
"type":"text"
}
],
"id":"4cc12cc77623452782cf8a37f8ba6e52",
"type":"text"
},
{
"fragments":[
{
"text":"First associate ",
"type":"text"
},
{
"text":"*.rliterate",
"type":"code"
},
{
"text":" files with ",
"type":"text"
},
{
"text":"rliterate",
"type":"code"
},
{
"text":" using a Git attributes file. For example in ",
"type":"text"
},
{
"text":"$HOME/.config/git/attributes",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"dbb16270187643a3978ee8aac0b16d8a",
"type":"text"
},
{
"id":"ca1d82459a9041689a51503bec437f67",
"path":[
""
],
"text":"*.rliterate diff=rliterate",
"type":"code"
},
{
"fragments":[
{
"text":"Then define the ",
"type":"text"
},
{
"text":"textconv",
"type":"code"
},
{
"text":" command in your git config (",
"type":"text"
},
{
"text":"$HOME/.gitconfig",
"type":"code"
},
{
"text":"):",
"type":"text"
}
],
"id":"c69258a42b6c449c95a310a041f1c6ec",
"type":"text"
},
{
"id":"3443fd22d8824369b1bdba19d4c4c361",
"path":[
""
],
"text":"[diff \"rliterate\"]\n      textconv=bash -c 'python $RLITERATE_ROOT/rliterate.py \"$0\" --diff'",
"type":"code"
}
],
"title":"Diffing *.rliterate files"
}
],
"id":"28b1947216874cedaf4ea69c2e2574b4",
"paragraphs":[],
"title":"Tips & tricks"
},
{
"children":[
{
"children":[],
"id":"9b46f6326dda497fabbc1ef7f5247422",
"paragraphs":[
{
"fragments":[
{
"text":"So I decided to build a prototype to learn what such a program might be like.",
"type":"text"
}
],
"id":"de7976f7066f4ec598fc13ba35e4ac67",
"type":"text"
},
{
"fragments":[
{
"text":"First I came up with a document model where pages were organized in a hierarchy. Each page had paragraphs that could be of different types. This idea was stolen from ",
"type":"text"
},
{
"text":"Smallest Federated Wiki",
"type":"link",
"url":"https://en.wikipedia.org/wiki/Smallest_Federated_Wiki"
},
{
"text":". The code paragraph would allow for literate programming, while the text paragraph would be for prose. I also envisioned other paragraph types that would allow for more interaction. Perhaps one paragraph type could be ",
"type":"text"
},
{
"text":"Graphviz",
"type":"link",
"url":"http://graphviz.org/"
},
{
"text":" code, and when edited, a generated graph would appear instead of the code.",
"type":"text"
}
],
"id":"7bf0be74a55e42e4aa192f2b4d8df297",
"type":"text"
},
{
"fragments":[
{
"text":"After coming up with a document model, I implement a GUI that would allow editing such documents. This GUI had to be first class as it would be the primary way author (and read) documents.",
"type":"text"
}
],
"id":"45375c646cae41e5889e450c800ca1d3",
"type":"text"
},
{
"fragments":[
{
"text":"The first version of the GUI was not first class though. I started to experiment with a workspace for showing pages.",
"type":"text"
}
],
"id":"d61ca1d00cc24fc38342d582ec2b257a",
"type":"text"
},
{
"fragments":[
{
"text":"First GUI prototype of workspace.",
"type":"text"
}
],
"id":"29efc5e72ba845f69550eb7111cdda36",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Then I contintued with a table of contents. At this point it was based on a tree control present in wxPython.",
"type":"text"
}
],
"id":"ce0204d9df944d77971b7dd970681c97",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"smallest federated wiki inspired the factory and the editing workflow",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"leo and smallest federated wiki inspired TOC and seeing a single page/node at a time",
"type":"text"
}
]
}
],
"id":"d37ed809b1ea44cf9205e4cad963bcb5",
"type":"list"
},
{
"fragments":[
{
"text":"First GUI prototype of table of contents. Workspace pages also have titles.",
"type":"text"
}
],
"id":"e3218f97246c4968a033f1b47df0d187",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"All the data so far had been static and hard coded. I started to flesh out the document model and implement GUI controls for manipulating the document. Here is the add button on pages.",
"type":"text"
}
],
"id":"26177d74a28244ff92d3b184251cd94d",
"type":"text"
},
{
"fragments":[
{
"text":"Add button that creates the factory paragraph.",
"type":"text"
}
],
"id":"78b0da7e7862460da9090b8b7d5e96e0",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Drag and drop was implemented fairly early. I wanted good visual feedback. This was part of the first class idea.",
"type":"text"
}
],
"id":"7f096a58f2d342caa99afd6ea6afa2af",
"type":"text"
},
{
"fragments":[
{
"text":"Drag and drop with red divider line indicating drop point.",
"type":"text"
}
],
"id":"de80bf92ffae4374babe97a9b21137a1",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Drag and drop with good visual feedback was hard to achieve with the tree control from wxWidgets, so at this point I rewrote the table of contents widget as a custom widget.",
"type":"text"
}
],
"id":"a2a7ada0fc5a4ddaa8cc7941301e43ed",
"type":"text"
},
{
"fragments":[
{
"text":"Custom table of contents that allows drag and drop and custom rendering.",
"type":"text"
}
],
"id":"b9aefae4342b4aa7b4fbc4205856aea6",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"I added more operations for adding and deleting pages.",
"type":"text"
}
],
"id":"842f693dc9084575b284d1e8c16d76fe",
"type":"text"
},
{
"fragments":[
{
"text":"Context menu that allows adding and deleting pages.",
"type":"text"
}
],
"id":"2487b6993caa44d58823fdd8e8a98249",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Then finally I added a second paragraph type: the code paragraph type that would enable literate programming.",
"type":"text"
}
],
"id":"0d02d349beef46db8517fa02e83ded67",
"type":"text"
},
{
"fragments":[
{
"text":"Code paragraphs showing literate programming in action.",
"type":"text"
}
],
"id":"4e372ab7e1694c9d901ca484cf9da151",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"At this point I had all the functionality in place for writing documents and embedding code in them. I imported all the code into an RLiterate document (previously it was written as a single Python file) and started extracting pieces and adding prose to explain the program. This was a tremendously rewarding experience. RLiterate was now bootstrapped.",
"type":"text"
}
],
"id":"a28ef005c5fb46f882d33121b9e94b3b",
"type":"text"
},
{
"fragments":[
{
"text":"As I continued to improve the RLiterate document, I noticed features I was lacking. I added them to the program and iterated.",
"type":"text"
}
],
"id":"64341df7a91148ac8e11d1b55ed8fe0f",
"type":"text"
}
],
"title":"The prototype"
},
{
"children":[],
"id":"f496615acbe44223a64e1db1fc154b12",
"paragraphs":[
{
"fragments":[
{
"text":"To me, the most central idea in literate programming is that we should write programs for other humans. Only secondary for the machine. I find code easier to understand if I can understand it in isolated pieces. One example where it is difficult to isolate a piece without literate programming is test code. Usually the test code is located in one file, and the implementation in another. To fully understand the piece it is useful to both read the tests and the implementation. To do this we have to find this related information in two unrelated files. I wrote about this problem in 2013 in ",
"type":"text"
},
{
"text":"Related things are not kept together",
"type":"link",
"url":"http://rickardlindberg.me/writing/reflections-on-programming/2013-02-24-related-things-are-not-kept-together/"
},
{
"text":". Literate programming allows us to present the test and the implementation in the same place, yet have the different pieces written to different files. The compiler might require that they are in separate files, but with literate programming, we care first about the other human that will read our code, and only second about the compiler.",
"type":"text"
}
],
"id":"fe04c847a4f54b3e80e49e60f650119e",
"type":"text"
},
{
"fragments":[
{
"text":"Another argument for literate programming is to express the \"why\". Why is this code here? Timothy Daly talks about it in his talk ",
"type":"text"
},
{
"text":"Literate Programming in the Large",
"type":"link",
"url":"https://www.youtube.com/watch?v=Av0PQDVTP4A"
},
{
"text":". He also argues that programmers must change the mindset from wring a program to writing a book. Some more can be read here: ",
"type":"text"
},
{
"text":"",
"type":"link",
"url":"http://axiom-developer.org/axiom-website/litprog.html"
},
{
"text":".",
"type":"text"
}
],
"id":"683d2cd7bded485cb4659cd40065ea93",
"type":"text"
},
{
"fragments":[
{
"text":"Some more resources about literate programming:",
"type":"text"
}
],
"id":"ead08e336d8749f79b82f0093feeeb94",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"\"Eve\" by Chris Granger",
"type":"link",
"url":"https://www.youtube.com/watch?v=5V1ynVyud4M"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"",
"type":"link",
"url":"http://eve-lang.com/deepdives/literate.html"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"",
"type":"link",
"url":"https://software-carpentry.org/blog/2011/03/literate-programming.html"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"",
"type":"link",
"url":"http://akkartik.name/post/literate-programming"
}
]
}
],
"id":"ab0371f11dd4469d982a7ea0ef617eb6",
"type":"list"
}
],
"title":"Why literate programming?"
},
{
"children":[],
"id":"e836cd0edf4a4b66ab8dd1e5d7fbbea3",
"paragraphs":[
{
"fragments":[
{
"text":"When researching ideas for RLiterate, I stumbled across ",
"type":"text"
},
{
"text":"ProjecturED",
"type":"link",
"url":"http://projectured.org/"
},
{
"text":". It is similar to RLiterate in the sense that it is an editor for more structured documents. Not just text. The most interesting aspect for me was that a variable name exists in one place, but can be rendered in multiple. So a rename is really simple. With RLiterate, you have to do a search and replace. But with ProjecturED you just change the name and it replicates everywhere. This is an attractive feature and is made possible by the different document model.",
"type":"text"
}
],
"id":"624299d364c54ef9afeedd42e7cca57b",
"type":"text"
}
],
"title":"Similar tools"
}
],
"id":"95150c4f0d92428bbeef4ae5a865398d",
"paragraphs":[
{
"fragments":[
{
"text":"I started to think about what would become RLiterate when I read the paper ",
"type":"text"
},
{
"text":"Active Essays on the Web",
"type":"link",
"url":"http://www.vpri.org/pdf/tr2009002_active_essays.pdf"
},
{
"text":". In it they talk about embedding code in documents that the reader can interact with. They also mention ",
"type":"text"
},
{
"text":"Literate programming",
"type":"link",
"url":"https://en.wikipedia.org/wiki/Literate_programming"
},
{
"text":" as having a related goal.",
"type":"text"
}
],
"id":"491cebce6de04e43a2695237c1359ca4",
"type":"text"
},
{
"fragments":[
{
"text":"At the time I was working on a program that I thought would be nice to write in this way. I wanted to write an article about the program and have the code for the program embedded in the article. I could have used a literate programming tool for this, but the interactive aspect of active essays made me think that a tool would be much more powerful if the document could be edited \"live\", similar to ",
"type":"text"
},
{
"text":"WYSIWYG",
"type":"link",
"url":"https://en.wikipedia.org/wiki/WYSIWYG"
},
{
"text":" editors. Literate programming tools I were aware of worked by editing plain text files with a special syntax for code and documentation blocks, thus lacking the interactive aspect.",
"type":"text"
}
],
"id":"54adfab3c5a2436d95fda4bdd95849c7",
"type":"text"
}
],
"title":"Background"
},
{
"children":[
{
"children":[
{
"children":[],
"id":"8ab608f28a5046548963649371cab5fe",
"paragraphs":[
{
"fragments":[
{
"text":"The main frame lays out two widgets horizontally: the table of contents (",
"type":"text"
},
{
"page_id":"c456e147b7b745ed80697c4faeb02bcb",
"text":null,
"type":"reference"
},
{
"text":") and the workspace (",
"type":"text"
},
{
"page_id":"4dd60465575c4297a25813f0478f15f9",
"text":null,
"type":"reference"
},
{
"text":"). It also creates the project from the specified file path.",
"type":"text"
}
],
"id":"4cea9ae964e344c990fcf98f9baa6bd0",
"type":"text"
},
{
"fragments":[
{
"text":"We put all components in a panel, and let the panel be the only child of the top level window. Otherwise tab cycling will not work properly. Reference?",
"type":"text"
}
],
"id":"3c4256b981ae435ea615666b5c16f057",
"type":"text"
},
{
"id":"1184388e07e149eea4b71458b275b38b",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class MainFrame(wx.Frame):\n\n    def __init__(self, filepath):\n        wx.Frame.__init__(\n            self,\n            None,\n            size=(920, 500),\n            title=\"{} ({}) - RLiterate\".format(\n                os.path.basename(filepath),\n                os.path.dirname(os.path.abspath(filepath))\n            )\n        )\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(self._create_main_panel(filepath), flag=wx.EXPAND, proportion=1)\n        self.SetSizer(sizer)\n\n    def _create_main_panel(self, filepath):\n        self._panel = wx.Panel(self)\n        project = Project(filepath)\n        self.SetToolBar(ToolBar(self._panel, project))\n        workspace = Workspace(self._panel, project)\n        toc = TableOfContents(self._panel, project)\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(toc, flag=wx.EXPAND, proportion=0)\n        sizer.Add(workspace, flag=wx.EXPAND, proportion=1)\n        self._panel.SetSizer(sizer)\n        return self._panel\n\n    <<MainFrame>>\n",
"type":"code"
},
{
"fragments":[
{
"text":"When a child control re-renders itself, the current focus can be lost. If we don't re-focus the panel, no window will have focus and keyboard shortcuts will not work. (This one took me a few hours to figure out.)",
"type":"text"
}
],
"id":"1a381ec6a72c4c5fa4bf798f542ce60e",
"type":"text"
},
{
"id":"ecd0d38324a74c9ba453317c417e46ce",
"path":[
"rliterate.py",
"<<classes>>",
"<<MainFrame>>"
],
"text":"def ChildReRendered(self):\n    self.Layout()\n    if wx.Window.FindFocus() is None:\n        self._panel.SetFocus()\n",
"type":"code"
}
],
"title":"Main frame"
},
{
"children":[
{
"children":[],
"id":"6cefdf62f0ca4cd38d051513d753a614",
"paragraphs":[
{
"id":"01064e87235e4715acfe9bc33b7c36b2",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"editor_group = self._tool_groups.add_group(\n    lambda: self.project.active_editor is not None\n)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Save:",
"type":"text"
}
],
"id":"90bf51ecb4d8486fa50b4f516ac0a25b",
"type":"text"
},
{
"id":"52cd0083225f42ce94a0676e17e99cd5",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"editor_group.add_tool(\n    wx.ART_FILE_SAVE,\n    lambda: self.project.active_editor.Save(),\n    short_help=\"Save\",\n    shortcuts=[\n        (wx.ACCEL_CTRL, ord('S')),\n        (wx.ACCEL_CTRL, wx.WXK_RETURN),\n    ]\n)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Cancel:",
"type":"text"
}
],
"id":"905e31bff5d24a6da6311cd9178ab95a",
"type":"text"
},
{
"id":"9b79b890a7d04820897952a5fcd33df4",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"editor_group.add_tool(\n    wx.ART_CROSS_MARK,\n    lambda: self.project.active_editor.Cancel(),\n    short_help=\"Cancel\",\n    shortcuts=[\n        (wx.ACCEL_CTRL, ord('G')),\n        (wx.ACCEL_NORMAL, wx.WXK_ESCAPE),\n    ]\n)\n",
"type":"code"
}
],
"title":"Editor"
},
{
"children":[],
"id":"75b0b360e86f4160bf1187d9cdb8787e",
"paragraphs":[
{
"id":"ea40532a6bdd49e089aff92efc6fc62e",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"navigation_group = self._tool_groups.add_group(\n    lambda: self.project.active_editor is None\n)",
"type":"code"
},
{
"fragments":[
{
"text":"Back:",
"type":"text"
}
],
"id":"ececa6e054d04b74af2a7678e202cc29",
"type":"text"
},
{
"id":"5150de92b16546099500af99ff1bb132",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"navigation_group.add_tool(\n    wx.ART_GO_BACK,\n    lambda: self.project.back(),\n    short_help=\"Go back\",\n    enabled_fn=lambda: self.project.can_back()\n)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Forward:",
"type":"text"
}
],
"id":"77ca49e949a34c019e0b0cc6253ccb39",
"type":"text"
},
{
"id":"f4bf7ab2e04a42cb8cbdb2056b9831f9",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"navigation_group.add_tool(\n    wx.ART_GO_FORWARD,\n    lambda: self.project.forward(),\n    short_help=\"Go forward\",\n    enabled_fn=lambda: self.project.can_forward()\n)\n",
"type":"code"
}
],
"title":"Navigation"
},
{
"children":[],
"id":"3852ed8c8eb648fdb651bc5da6cbfece",
"paragraphs":[
{
"id":"8c03a094ee7c497485d256ef13024a02",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"undo_group = self._tool_groups.add_group(\n    lambda: self.project.active_editor is None\n)",
"type":"code"
},
{
"fragments":[
{
"text":"Undo:",
"type":"text"
}
],
"id":"40429b0e5d2b40fcbd4e9a0f2795c87a",
"type":"text"
},
{
"id":"c0b506740e8e4e09a3e05ff92b27ff0d",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"undo_group.add_tool(\n    wx.ART_UNDO,\n    lambda: self.project.get_undo_operation()[1](),\n    short_help=lambda: \"Undo\" if self.project.get_undo_operation() is None else \"Undo '{}'\".format(self.project.get_undo_operation()[0]),\n    enabled_fn=lambda: self.project.get_undo_operation() is not None,\n    shortcuts=[\n        (wx.ACCEL_CTRL, ord('Z')),\n    ]\n)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Redo:",
"type":"text"
}
],
"id":"e168c151f1864115ba8c9bbeb09f1d3f",
"type":"text"
},
{
"id":"9baa1a7a666943db85996c86f4f98caf",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"undo_group.add_tool(\n    wx.ART_REDO,\n    lambda: self.project.get_redo_operation()[1](),\n    short_help=lambda: \"Redo\" if self.project.get_redo_operation() is None else \"Redo '{}'\".format(self.project.get_redo_operation()[0]),\n    enabled_fn=lambda: self.project.get_redo_operation() is not None\n)\n",
"type":"code"
}
],
"title":"Undo"
},
{
"children":[],
"id":"5829ea156b114d31875e20ad4e032b1e",
"paragraphs":[
{
"id":"45f0244cdca14b6da6953745fc67b311",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"quit_group = self._tool_groups.add_group()",
"type":"code"
},
{
"id":"01a5da47a6cb4843b382cb51994a2e81",
"path":[
"rliterate.py",
"<<classes>>",
"<<ToolBar/__init__>>"
],
"text":"quit_group.add_tool(\n    wx.ART_QUIT,\n    lambda: main_frame.Close(),\n    short_help=\"Quit\",\n    shortcuts=[\n        (wx.ACCEL_CTRL, ord('Q')),\n    ]\n)\n",
"type":"code"
}
],
"title":"Quit"
}
],
"id":"b311a34073564bc99fc72d44b3c74369",
"paragraphs":[
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"ToolBar",
"type":"code"
},
{
"text":" has two responsiblities:",
"type":"text"
}
],
"id":"1466531b26504cd19d768312fce9a4d4",
"type":"text"
},
{
"child_type":"ordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Populate itself with buttons appropriate to the project state.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Maintain the corresponding accelerator table (used for shortcuts).",
"type":"text"
}
]
}
],
"id":"957dd20eec664bd3994a2bf828ffde8e",
"type":"list"
},
{
"id":"c5e0fb1941dc421592abf8ccc5588916",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ToolBar(wx.ToolBar):\n\n    def __init__(self, parent, project, *args, **kwargs):\n        wx.ToolBar.__init__(self, parent, *args, **kwargs)\n        self.project_listener = Listener(\n            lambda event: self._tool_groups.populate(self),\n            \"document\", \"layout\", \"editor\"\n        )\n        self._tool_groups = ToolGroups(parent)\n        <<ToolBar/__init__>>\n        self.SetProject(project)\n\n    def SetProject(self, project):\n        self.project = project\n        self.project_listener.set_observable(self.project)\n",
"type":"code"
},
{
"fragments":[
{
"text":"ToolGroups",
"type":"code"
},
{
"text":" maintains a list of groups of tools that can be populated into a tool bar:",
"type":"text"
}
],
"id":"abc5280bcfe84f6fa24db9fb31e1ff6d",
"type":"text"
},
{
"id":"89f873d06e9042dd89e3e559503aa733",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ToolGroups(object):\n\n    def __init__(self, frame):\n        self._frame = frame\n        self._tool_groups = []\n\n    def add_group(self, *args, **kwargs):\n        group = ToolGroup(self._frame, *args, **kwargs)\n        self._tool_groups.append(group)\n        return group\n\n    def populate(self, toolbar):\n        items = []\n        toolbar.ClearTools()\n        first = True\n        for group in self._tool_groups:\n            if group.is_active():\n                if not first:\n                    toolbar.AddSeparator()\n                first = False\n                group.populate(toolbar)\n                items.extend(group.accelerator_entries())\n        toolbar.Realize()\n        self._frame.SetAcceleratorTable(wx.AcceleratorTable(items))\n",
"type":"code"
},
{
"fragments":[
{
"text":"ToolGroup",
"type":"code"
},
{
"text":" maintains a list of tools that can be shown or not in the toolbar depending on the ",
"type":"text"
},
{
"text":"active_fn",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"963e39d03d8645bab8dd840fb94bc2da",
"type":"text"
},
{
"id":"4c0f55d407844142a68600b960dac1aa",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ToolGroup(object):\n\n    def __init__(self, frame, active_fn=None):\n        self._tools = []\n        self._frame = frame\n        self._active_fn = active_fn\n\n    def add_tool(self, *args, **kwargs):\n        self._tools.append(Tool(self._frame, *args, **kwargs))\n\n    def is_active(self):\n        if self._active_fn is None:\n            return True\n        else:\n            return self._active_fn()\n\n    def accelerator_entries(self):\n        entries = []\n        for tool in self._tools:\n            entries.extend(tool.accelerator_entries())\n        return entries\n\n    def populate(self, toolbar):\n        for tool in self._tools:\n            tool.populate(toolbar)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Tool",
"type":"code"
},
{
"text":" has information about a single tool and knows how to populate itselt in a tool bar:",
"type":"text"
}
],
"id":"41db7d30335d404aa1b2a3a324d0cfa4",
"type":"text"
},
{
"id":"7a0d10485c864d4582976b7d919e7c36",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Tool(object):\n\n    def __init__(self, frame, art, action_fn, short_help=\"\", enabled_fn=None, shortcuts=[]):\n        self.id = wx.NewId()\n        frame.Bind(wx.EVT_MENU, self._on_action, id=self.id)\n        self.art = art\n        self.short_help = short_help\n        self.action_fn = action_fn\n        self.enabled_fn = enabled_fn\n        self.shortcuts = shortcuts\n\n    def _on_action(self, event):\n        if self.action_fn is not None:\n            self.action_fn()\n\n    def _is_enabled(self):\n        if self.enabled_fn is None:\n            return True\n        else:\n            return self.enabled_fn()\n\n    def accelerator_entries(self):\n        return [wx.AcceleratorEntry(a, b, self.id) for (a, b) in self.shortcuts]\n\n    def populate(self, toolbar):\n        toolbar.AddSimpleTool(\n            self.id,\n            wx.ArtProvider.GetBitmap(\n                self.art,\n                wx.ART_BUTTON,\n                (24, 24)\n            )\n        )\n        toolbar.EnableTool(self.id, self._is_enabled())\n        if callable(self.short_help):\n            text = self.short_help()\n        else:\n            text = self.short_help\n        if self.shortcuts:\n            text = \"{} ({})\".format(\n                text,\n                \" / \".join(x.ToString() for x in self.accelerator_entries())\n            )\n        toolbar.SetToolShortHelp(self.id, text)\n",
"type":"code"
}
],
"title":"Toolbar"
},
{
"children":[
{
"children":[
{
"children":[],
"id":"49b2e6c578264b24a860b0172a9ac3a3",
"paragraphs":[
{
"fragments":[
{
"text":"The table of contents widget lays out two components in a vertical container: the unhoist button and the page container.",
"type":"text"
}
],
"id":"77b6cddc2a2946249d6c2cbae7134ed1",
"type":"text"
},
{
"fragments":[
{
"text":"The scroll position of the page container is not preserved if it is destroyed and re-created. We therefore maintain the same instance across re-renders.",
"type":"text"
}
],
"id":"e7aef630ee3b44f48a4538b9518a6b4d",
"type":"text"
},
{
"id":"811a46cc4115441eb7d9fb27cd4b9916",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContents>>"
],
"text":"def _render(self):\n    with flicker_free_drawing(self):\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n        self.SetSizer(self.sizer)\n        self.unhoist_button = None\n        self.page_sizer = wx.BoxSizer(wx.VERTICAL)\n        self.page_container = CompactScrolledWindow(self)\n        self.page_container.SetSizer(self.page_sizer)\n        self.sizer.Add(self.page_container, flag=wx.EXPAND, proportion=1)\n        self.SetBackgroundColour((255, 255, 255))\n        self._re_render()\n\ndef _re_render(self):\n    with flicker_free_drawing(self):\n        self.drop_points = []\n        if self.unhoist_button is not None:\n            self.unhoist_button.Destroy()\n            self.unhoist_button = None\n        self.page_sizer.Clear(True)\n        self._render_unhoist_button()\n        self._render_page_container()\n        self.GetTopLevelParent().ChildReRendered()\n",
"type":"code"
},
{
"fragments":[
{
"text":"The unhoist button (only shown if a page has been hoisted):",
"type":"text"
}
],
"id":"8cf1468ca45b41d4a2d0f2e8de91c35d",
"type":"text"
},
{
"id":"87836442b7824a8891244f5c8e9dc07d",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContents>>"
],
"text":"def _render_unhoist_button(self):\n    if self._get_hoisted_page() is not None:\n        self.unhoist_button = wx.Button(self, label=\"unhoist\")\n        self.unhoist_button.Bind(\n            wx.EVT_BUTTON,\n            lambda event: self.project.set_hoisted_page(None)\n        )\n        self.sizer.Insert(0, self.unhoist_button, flag=wx.EXPAND)\n",
"type":"code"
},
{
"fragments":[
{
"text":"The page container is a scrolling container that contains a set of rows representing pages. Each row is appropriately intendent to create the illusion of a tree.",
"type":"text"
}
],
"id":"48e403ac69b5492bb09ff41381d77b8f",
"type":"text"
},
{
"id":"89783cf4c0cc40f5a3c8a706be39b056",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContents>>"
],
"text":"def _render_page_container(self):\n    if self._get_hoisted_page() is None:\n        self._render_page(self.project.get_page())\n    else:\n        self._render_page(self._get_hoisted_page())\n\ndef _get_hoisted_page(self):\n    if self.project.get_hoisted_page() is None:\n        return None\n    else:\n        return self.project.get_page(self.project.get_hoisted_page())\n\ndef _render_page(self, page, indentation=0):\n    is_collapsed = self.project.is_collapsed(page.id)\n    self.page_sizer.Add(\n        TableOfContentsRow(self.page_container, self.project, page, indentation),\n        flag=wx.EXPAND\n    )\n    divider = Divider(self.page_container, padding=0, height=2)\n    self.page_sizer.Add(\n        divider,\n        flag=wx.EXPAND\n    )\n    if is_collapsed or len(page.children) == 0:\n        before_page_id = None\n    else:\n        before_page_id = page.children[0].id\n    self.drop_points.append(TableOfContentsDropPoint(\n        divider=divider,\n        indentation=indentation+1,\n        parent_page_id=page.id,\n        before_page_id=before_page_id\n    ))\n    if not is_collapsed:\n        for child, next_child in pairs(page.children):\n            divider = self._render_page(child, indentation+1)\n            self.drop_points.append(TableOfContentsDropPoint(\n                divider=divider,\n                indentation=indentation+1,\n                parent_page_id=page.id,\n                before_page_id=None if next_child is None else next_child.id\n            ))\n    return divider\n",
"type":"code"
},
{
"id":"f1e8ef353eac47dd93dc76d86efcce6e",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TableOfContentsDropPoint(object):\n\n    def __init__(self, divider, indentation, parent_page_id, before_page_id):\n        self.divider = divider\n        self.indentation = indentation\n        self.parent_page_id = parent_page_id\n        self.before_page_id = before_page_id\n\n    def x_distance_to(self, x):\n        left_padding = TableOfContentsButton.SIZE+1+TableOfContentsRow.BORDER\n        span_x_center = left_padding + TableOfContentsRow.INDENTATION_SIZE * (self.indentation + 1.5)\n        return abs(span_x_center - x)\n\n    def y_distance_to(self, y):\n        return abs(self.divider.Position.y + self.divider.Size[1]/2 - y)\n\n    def Show(self):\n        self.divider.Show(sum([\n            TableOfContentsRow.BORDER,\n            TableOfContentsButton.SIZE,\n            1,\n            self.indentation*TableOfContentsRow.INDENTATION_SIZE,\n        ]))\n\n    def Hide(self):\n        self.divider.Hide()",
"type":"code"
}
],
"title":"Rendering"
},
{
"children":[],
"id":"99a2a81b38164293b9ad9287b33bfbbb",
"paragraphs":[
{
"fragments":[
{
"text":"Inside the table of contents, pages can be dragged and drop. The drag is initiated in the row widget and handled in the table of contents widget.",
"type":"text"
}
],
"id":"84b201f687224953ad89da562eb6b1cb",
"type":"text"
},
{
"id":"2d626c4528eb406c983b5d64851d10c9",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContents>>",
"<<__init__>>"
],
"text":"self.SetDropTarget(TableOfContentsDropTarget(self, self.project))",
"type":"code"
},
{
"id":"0985fad6f1be429096835a728941d44f",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TableOfContentsDropTarget(DropPointDropTarget):\n\n    def __init__(self, toc, project):\n        DropPointDropTarget.__init__(self, toc, \"page\")\n        self.project = project\n\n    def OnDataDropped(self, dropped_page, drop_point):\n        self.project.get_page(dropped_page[\"page_id\"]).move(\n            parent_page_id=drop_point.parent_page_id,\n            before_page_id=drop_point.before_page_id\n        )\n",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"DropPointDropTarget",
"type":"code"
},
{
"text":" (",
"type":"text"
},
{
"page_id":"1d623dc7a566477786012227b9790d81",
"text":null,
"type":"reference"
},
{
"text":") requires ",
"type":"text"
},
{
"text":"FindClosestDropPoint",
"type":"code"
},
{
"text":" to be defined on the target object. Here it is:",
"type":"text"
}
],
"id":"dc9eb0e4255e48c9999944caa48a60bd",
"type":"text"
},
{
"id":"f32123cdfe6f49239b35ab893b621d51",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContents>>"
],
"text":"def FindClosestDropPoint(self, screen_pos):\n    client_pos = (client_x, client_y) = self.page_container.ScreenToClient(screen_pos)\n    if self.page_container.HitTest(client_pos) == wx.HT_WINDOW_INSIDE:\n        y_distances = defaultdict(list)\n        for drop_point in self.drop_points:\n            y_distances[drop_point.y_distance_to(client_y)].append(drop_point)\n        if y_distances:\n            return min(\n                y_distances[min(y_distances.keys())],\n                key=lambda drop_point: drop_point.x_distance_to(client_x)\n            )\n",
"type":"code"
}
],
"title":"Dropping pages"
}
],
"id":"f0c6aa103d2a45aa8737d7d964e860bc",
"paragraphs":[
{
"fragments":[
{
"text":"The main table of contents widget listens for changes to a project (only events related to changes in the document and the layout of the table of contents) and then re-renders itself.",
"type":"text"
}
],
"id":"d7196568704f4228956b0166a06b2ab5",
"type":"text"
},
{
"id":"19989e3da6004e61b58d3a570b52d9fc",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TableOfContents(wx.Panel):\n    <<TableOfContents>>\n",
"type":"code"
},
{
"id":"985f041571444f9c9c62cb0905e144c8",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContents>>"
],
"text":"def __init__(self, parent, project):\n    wx.Panel.__init__(self, parent, size=(250, -1))\n    self.project_listener = Listener(\n        self._re_render_from_event,\n        \"document\", \"layout.toc\", \"layout.workspace\"\n    )\n    self.SetProject(project)\n    <<__init__>>\n    self._render()\n\ndef SetProject(self, project):\n    self.project = project\n    self.project_listener.set_observable(self.project)\n",
"type":"code"
},
{
"fragments":[
{
"text":"This seems to be needed for some reason:",
"type":"text"
}
],
"id":"a1ec06a34b604de99e5102a82fe00f1b",
"type":"text"
},
{
"id":"05d68cdb54b84316862f03915d6030a4",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContents>>"
],
"text":"def _re_render_from_event(self, event):\n    wx.CallAfter(self._re_render)\n",
"type":"code"
}
],
"title":"Main widget"
},
{
"children":[],
"id":"116c471cbc1d41588168321c18c99386",
"paragraphs":[
{
"fragments":[
{
"text":"The row widget renders the page title at the appropriate indentation. If the page has children, an expand/collapse widget is also rendered to the left of the title.",
"type":"text"
}
],
"id":"f0f947ef43f0460ab970e56b50dfb339",
"type":"text"
},
{
"id":"4edadec964c141f7a33b7cc691d6e00b",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TableOfContentsRow(wx.Panel):\n\n    def __init__(self, parent, project, page, indentation):\n        wx.Panel.__init__(self, parent)\n        self.project = project\n        self.page = page\n        self.indentation = indentation\n        self._render()\n\n    <<TableOfContentsRow>>\n",
"type":"code"
},
{
"fragments":[
{
"text":"Rendering lays out the expand/collapse button (if the page has children) and the page title in a horizontal sizer. If the page is open, we highlight it with bold font. (For some reason, the font has to be set on the panel and not on the static text in order for size calculations to behave correctly.)",
"type":"text"
}
],
"id":"0b017f41b129456d9969b8b4115f3b6c",
"type":"text"
},
{
"id":"e7222f9d1f2e4c6dbcdee098b3f75ca4",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContentsRow>>"
],
"text":"BORDER = 2\nINDENTATION_SIZE = 16\n\ndef _render(self):\n    self.sizer = wx.BoxSizer(wx.HORIZONTAL)\n    self.sizer.Add((self.indentation*self.INDENTATION_SIZE, 1))\n    if self.page.children:\n        button = TableOfContentsButton(self, self.project, self.page)\n        self.sizer.Add(button, flag=wx.EXPAND|wx.LEFT, border=self.BORDER)\n    else:\n        self.sizer.Add((TableOfContentsButton.SIZE+1+self.BORDER, 1))\n    if self.project.is_open(self.page.id):\n        self.Font = create_font(bold=True)\n    text = wx.StaticText(self)\n    text.SetLabelText(self.page.title)\n    self.sizer.Add(text, flag=wx.ALL, border=self.BORDER)\n    self.SetSizer(self.sizer)\n    self.Bind(wx.EVT_ENTER_WINDOW, self._on_enter_window)\n    self.Bind(wx.EVT_LEAVE_WINDOW, self._on_leave_window)\n    for helper in [MouseEventHelper(self), MouseEventHelper(text)]:\n        helper.OnClick = self._on_click\n        helper.OnRightClick = self._on_right_click\n        helper.OnDrag = self._on_drag\n",
"type":"code"
},
{
"fragments":[
{
"text":"Event handlers:",
"type":"text"
}
],
"id":"2f458d6548464fc88dbde361469cfcba",
"type":"text"
},
{
"id":"38c32e72a6514307926cf2ae728dbbf6",
"path":[
"rliterate.py",
"<<classes>>",
"<<TableOfContentsRow>>"
],
"text":"def _on_click(self):\n    open_pages_gui(self, self.project, [self.page.id], column_index=0)\n\ndef _on_right_click(self):\n    menu = PageContextMenu(self.project, self.page)\n    self.PopupMenu(menu)\n    menu.Destroy()\n\ndef _on_drag(self):\n    data = RliterateDataObject(\"page\", {\n        \"page_id\": self.page.id,\n    })\n    drag_source = wx.DropSource(self)\n    drag_source.SetData(data)\n    result = drag_source.DoDragDrop(wx.Drag_DefaultMove)\n\ndef _on_enter_window(self, event):\n    self.SetBackgroundColour((240, 240, 240))\n\ndef _on_leave_window(self, event):\n    self.SetBackgroundColour((255, 255, 255))\n",
"type":"code"
}
],
"title":"Row widget"
},
{
"children":[],
"id":"159632cc0cfd436ab33cb97a335306b4",
"paragraphs":[
{
"fragments":[
{
"text":"The expand/collapse widget draws a native looking expand/collapse symbol. When clicked, the corresponding page it toggled.",
"type":"text"
}
],
"id":"65ea1114c9de4bc4819558ac74188f17",
"type":"text"
},
{
"id":"e91427b852754cb682eb63c881d490f4",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TableOfContentsButton(wx.Panel):\n\n    SIZE = 16\n\n    def __init__(self, parent, project, page):\n        wx.Panel.__init__(self, parent, size=(self.SIZE+1, -1))\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)\n        self.project = project\n        self.page = page\n        self.SetCursor(wx.StockCursor(wx.CURSOR_HAND))\n\n    def OnLeftDown(self, event):\n        self.project.toggle_collapsed(self.page.id)\n\n    def OnPaint(self, event):\n        dc = wx.GCDC(wx.PaintDC(self))\n        dc.SetBrush(wx.BLACK_BRUSH)\n        render = wx.RendererNative.Get()\n        (w, h) = self.Size\n        render.DrawTreeItemButton(\n            self,\n            dc,\n            (0, (h-self.SIZE)/2, self.SIZE, self.SIZE),\n            flags=0 if self.project.is_collapsed(self.page.id) else wx.CONTROL_EXPANDED\n        )\n",
"type":"code"
}
],
"title":"Expand/Collapse widget"
},
{
"children":[],
"id":"308ae25fdd69497baef7c40ddb8e9ad3",
"paragraphs":[
{
"id":"8ca885b27025476996cabd09eedae341",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class PageContextMenu(wx.Menu):\n\n    def __init__(self, project, page):\n        wx.Menu.__init__(self)\n        self.project = project\n        self.page = page\n        self.child_ids = [page.id]+[child.id for child in page.children]\n        self._create_menu()\n\n    def _create_menu(self):\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: open_pages_gui(self, self.project, [self.page.id], column_index=0),\n            self.Append(wx.NewId(), \"Open\")\n        )\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: open_pages_gui(self, self.project, [self.page.id]),\n            self.Append(wx.NewId(), \"Open append\")\n        )\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: open_pages_gui(self, self.project, self.child_ids, column_index=0),\n            self.Append(wx.NewId(), \"Open with children\")\n        )\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: open_pages_gui(self, self.project, self.child_ids),\n            self.Append(wx.NewId(), \"Open with children append\")\n        )\n        self.AppendSeparator()\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: self.project.add_page(parent_id=self.page.id),\n            self.Append(wx.NewId(), \"Add child\")\n        )\n        self.AppendSeparator()\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: self.project.set_hoisted_page(self.page.id),\n            self.Append(wx.NewId(), \"Hoist\")\n        )\n        self.AppendSeparator()\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: set_clipboard_text(self.page.id),\n            self.Append(wx.NewId(), \"Copy id\")\n        )\n        self.AppendSeparator()\n        delete_item = self.Append(wx.NewId(), \"Delete\")\n        delete_item.Enable(self.page.id != self.project.get_page().id)\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: self.page.delete(),\n            delete_item\n        )\n",
"type":"code"
},
{
"id":"94c73850b40e496ab8a25c9ec3174958",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def set_clipboard_text(text):\n    if wx.TheClipboard.Open():\n        try:\n            wx.TheClipboard.SetData(wx.TextDataObject(text.encode(\"utf-8\")))\n        finally:\n            wx.TheClipboard.Close()\n",
"type":"code"
}
],
"title":"Page context menu"
}
],
"id":"c456e147b7b745ed80697c4faeb02bcb",
"paragraphs":[
{
"fragments":[
{
"text":"The table of contents shows the outline of the document. It allows only subtrees to be shown (hoisting) and allows subtrees to be expanded/collapsed. It also provides navigation functions to allow pages to be opened.",
"type":"text"
}
],
"id":"7fa7bfb6863d487b9989cb454fed762d",
"type":"text"
}
],
"title":"Table of contents"
},
{
"children":[
{
"children":[
{
"children":[],
"id":"3f0fc44a9eba4a5cbcae5da3ee5d8925",
"paragraphs":[
{
"fragments":[
{
"text":"Rendering a workspace means laying out a set of ",
"type":"text"
},
{
"page_id":"b5ccbbfc0b6445a3a19a5c3dc39daa81",
"text":"column",
"type":"reference"
},
{
"text":" widgets horizontally. Columns are filled with page containers.",
"type":"text"
}
],
"id":"246a23a170164f1c91e73f877b824930",
"type":"text"
},
{
"id":"d5dd19fb0dac4111b42932071e6a0c2f",
"path":[
"rliterate.py",
"<<classes>>",
"<<Workspace>>"
],
"text":"def _render(self):\n    with flicker_free_drawing(self):\n        self.SetBackgroundColour((200, 200, 200))\n        self.sizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.sizer.AddSpacer(PAGE_PADDING)\n        self.SetSizer(self.sizer)\n        self.columns = []\n        self._re_render()\n\ndef _re_render(self):\n    with flicker_free_drawing(self):\n        column_count_changed = self._ensure_num_columns(len(self.project.columns))\n        last_column_changed_pages = False\n        for index, page_ids in enumerate(self.project.columns):\n            last_column_changed_pages = self.columns[index].SetPages(\n                self.project,\n                page_ids\n            )\n        self.GetTopLevelParent().ChildReRendered()\n        if column_count_changed or last_column_changed_pages:\n            self.ScrollToEnd()\n\ndef _ensure_num_columns(self, num):\n    count_changed = False\n    while len(self.columns) > num:\n        count_changed = True\n        self.columns.pop(-1).Destroy()\n    while len(self.columns) < num:\n        count_changed = True\n        self.columns.append(self._add_column())\n    return count_changed\n\ndef _add_column(self):\n    column = Column(self, index=len(self.columns))\n    self.sizer.Add(column, flag=wx.EXPAND)\n    return column\n",
"type":"code"
},
{
"fragments":[
{
"text":"Layout",
"type":"code"
},
{
"text":" is called on the parent. Otherwise scrollbars don't seem to update appropriately.",
"type":"text"
}
],
"id":"db2d5c4540ff42baa0cc1232134f310b",
"type":"text"
},
{
"fragments":[
{
"text":"On removing widgets ",
"type":"text"
},
{
"text":"Removing a widget from its wxPython parent",
"type":"link",
"url":"https://stackoverflow.com/a/41064558"
},
{
"text":":",
"type":"text"
}
],
"id":"859451cd2a664a1698affbc6ea11fa46",
"type":"text"
},
{
"fragments":[
{
"text":"Widgets will remove themselves from the sizer when they are destroyed, so yes, it is redundant. Also, widgets will remove themselves from the parent's child list, so calling ",
"type":"text"
},
{
"text":"RemoveChild",
"type":"code"
},
{
"text":" is also redundant. IOW, the call to ",
"type":"text"
},
{
"text":"window.Destroy()",
"type":"code"
},
{
"text":" will be sufficient to remove the widget and its resources, and to do the necessary clean-ups in the parent and the sizer.",
"type":"text"
}
],
"id":"c881d2542f834261b1060e001e991f85",
"type":"quote"
},
{
"fragments":[
{
"text":"wx.CallAfter",
"type":"code"
},
{
"text":" seems to be needed to correctly update scrollbars on an event notification. Resizing the window also works.",
"type":"text"
}
],
"id":"fe799c6fd8484a9095d88a7f3faaf4bd",
"type":"text"
},
{
"id":"8e4e54c3a9fe453cbb9e6298c51a700e",
"path":[
"rliterate.py",
"<<classes>>",
"<<Workspace>>"
],
"text":"def _re_render_from_event(self, event):\n    wx.CallAfter(self._re_render)",
"type":"code"
}
],
"title":"Rendering"
},
{
"children":[],
"id":"e056bc29d02647a0a67d03693ddc4c7d",
"paragraphs":[
{
"fragments":[
{
"text":"Inside a workspace, paragraphs can be dragged and dropped. The drag is handled in the paragraph widget, but the drop is handled in the workspace widget.",
"type":"text"
}
],
"id":"d983d5dcddcd4e67a5c68f77b22dff83",
"type":"text"
},
{
"id":"e05a55e327d042329bfce331b38762b6",
"path":[
"rliterate.py",
"<<classes>>",
"<<Workspace>>",
"<<__init__>>"
],
"text":"self.SetDropTarget(WorkspaceDropTarget(self, self.project))",
"type":"code"
},
{
"id":"79f48335418c42c1a622c691514415ab",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class WorkspaceDropTarget(DropPointDropTarget):\n\n    def __init__(self, workspace, project):\n        DropPointDropTarget.__init__(self, workspace, \"paragraph\")\n        self.project = project\n\n    def OnDataDropped(self, dropped_paragraph, drop_point):\n        self.project.get_paragraph(\n            dropped_paragraph[\"page_id\"],\n            dropped_paragraph[\"paragraph_id\"]\n        ).move(\n            target_page=drop_point.page_id,\n            before_paragraph=drop_point.next_paragraph_id\n        )\n",
"type":"code"
},
{
"fragments":[
{
"text":"The DropPointDropTarget requires FindClosestDropPoint to be defined on the target object. Here it is:",
"type":"text"
}
],
"id":"bd195234d44049b6b0073b835bce34ba",
"type":"text"
},
{
"id":"9c426c9c3e10484ba02da8bf2b2ff94d",
"path":[
"rliterate.py",
"<<classes>>",
"<<Workspace>>"
],
"text":"def FindClosestDropPoint(self, screen_pos):\n    return find_first(\n        self.columns,\n        lambda column: column.FindClosestDropPoint(screen_pos)\n    )",
"type":"code"
}
],
"title":"Dropping paragraphs"
}
],
"id":"e2de7fc557e542a7ac8fde91b7651736",
"paragraphs":[
{
"fragments":[
{
"text":"The main workspace widget is a horizontal ",
"type":"text"
},
{
"page_id":"94b57547a194415cb00feb2aaf486e27",
"text":"scrolling container",
"type":"reference"
},
{
"text":" containing column widgets.",
"type":"text"
}
],
"id":"6a9ac9606ee5499694f3236ccabf1127",
"type":"text"
},
{
"fragments":[
{
"text":"The workspace is re-rendered whenever relevant parts of the project changes.",
"type":"text"
}
],
"id":"b5c9d88523ed45f1bf811a1d849f729b",
"type":"text"
},
{
"id":"a9f5b20c21c244d583d9b4f808ac8753",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Workspace(CompactScrolledWindow):\n    <<Workspace>>\n",
"type":"code"
},
{
"id":"0af9efe473c140fd93a87c18050ab77e",
"path":[
"rliterate.py",
"<<classes>>",
"<<Workspace>>"
],
"text":"def __init__(self, parent, project):\n    CompactScrolledWindow.__init__(self, parent, style=wx.HSCROLL)\n    self.project_listener = Listener(\n        self._re_render_from_event,\n        \"document\",\n        \"layout.workspace\"\n    )\n    self.SetProject(project)\n    <<__init__>>\n    self._render()\n\ndef SetProject(self, project):\n    self.project = project\n    self.project_listener.set_observable(self.project)\n",
"type":"code"
}
],
"title":"Main widget"
},
{
"children":[],
"id":"b5ccbbfc0b6445a3a19a5c3dc39daa81",
"paragraphs":[
{
"fragments":[
{
"text":"The column widget is a vertical ",
"type":"text"
},
{
"page_id":"94b57547a194415cb00feb2aaf486e27",
"text":"scrolling container",
"type":"reference"
},
{
"text":" containing page containers.",
"type":"text"
}
],
"id":"5d9d79b33aa44d6ca21b8a760fd09dc3",
"type":"text"
},
{
"id":"cb982a3129f940f18cd4bc9237d4c8f8",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Column(CompactScrolledWindow):\n\n    def __init__(self, parent, index):\n        CompactScrolledWindow.__init__(\n            self,\n            parent,\n            style=wx.VSCROLL,\n            size=(PAGE_BODY_WIDTH+2*CONTAINER_BORDER+PAGE_PADDING+SHADOW_SIZE, -1)\n        )\n        self.project = None\n        self.index = index\n        self._page_ids = []\n        self._setup_layout()\n        self.Bind(EVT_HOVERED_TOKEN_CHANGED, self._on_hovered_token_changed)\n        self.Bind(EVT_TOKEN_CLICK, self._on_token_click)\n\n    def _on_hovered_token_changed(self, event):\n        if event.token is not None and event.token.token_type in [\n            TokenType.RLiterate.Link,\n            TokenType.RLiterate.Reference,\n        ]:\n            event.widget.SetCursor(wx.StockCursor(wx.CURSOR_HAND))\n        else:\n            event.widget.SetDefaultCursor()\n\n    def _on_token_click(self, event):\n        if self.project is None:\n            return\n        if event.token.token_type == TokenType.RLiterate.Reference:\n            open_pages_gui(self, self.project,\n                [event.token.extra[\"page_id\"]],\n                column_index=self.index+1\n            )\n        elif event.token.token_type == TokenType.RLiterate.Link:\n            webbrowser.open(event.token.extra[\"url\"])\n\n    def _setup_layout(self):\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n        self.SetSizer(self.sizer)\n\n    def SetPages(self, project, page_ids):\n        self.project = project\n        self.containers = []\n        self.sizer.Clear(True)\n        self.sizer.AddSpacer(PAGE_PADDING)\n        for page_id in page_ids:\n            if project.get_page(page_id) is not None:\n                container = PageContainer(self, project, page_id)\n                self.sizer.Add(\n                    container,\n                    flag=wx.RIGHT|wx.BOTTOM|wx.EXPAND,\n                    border=PAGE_PADDING\n                )\n                self.containers.append(container)\n        if page_ids == self._page_ids:\n            return False\n        else:\n            self.ScrollToBeginning()\n            self._page_ids = page_ids\n            return True\n\n    def FindClosestDropPoint(self, screen_pos):\n        return find_first(\n            self.containers,\n            lambda container: container.FindClosestDropPoint(screen_pos)\n        )\n",
"type":"code"
}
],
"title":"Column widget"
},
{
"children":[],
"id":"1164b94ba82c476897ce18fc1b70a5b8",
"paragraphs":[
{
"fragments":[
{
"text":"The page container widget draws a box with border. Inside the box a page widget is rendered.",
"type":"text"
}
],
"id":"bb9393f32b254e4c8d629a90e706a5a1",
"type":"text"
},
{
"id":"29a948082ed3467395fb08fcbc0ad7c9",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class PageContainer(wx.Panel):\n\n    def __init__(self, parent, project, page_id):\n        wx.Panel.__init__(self, parent)\n        self.project = project\n        self.page_id = page_id\n        self._render()\n\n    def _render(self):\n        self.SetBackgroundColour((150, 150, 150))\n        self.inner_sizer = wx.BoxSizer(wx.VERTICAL)\n        self.inner_container = wx.Panel(self)\n        self.inner_container.SetBackgroundColour((255, 255, 255))\n        self.inner_container.SetSizer(self.inner_sizer)\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n        self.sizer.Add(\n            self.inner_container,\n            flag=wx.EXPAND|wx.RIGHT|wx.BOTTOM,\n            border=SHADOW_SIZE\n        )\n        self.SetSizer(self.sizer)\n        self.inner_sizer.AddSpacer(CONTAINER_BORDER)\n        self.page = PagePanel(self.inner_container, self.project, self.page_id)\n        self.inner_sizer.Add(\n            self.page,\n            flag=wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND,\n            border=CONTAINER_BORDER\n        )\n\n    def FindClosestDropPoint(self, screen_pos):\n        return self.page.FindClosestDropPoint(screen_pos)\n",
"type":"code"
}
],
"title":"Page container widget"
},
{
"children":[
{
"children":[],
"id":"553a9a3715bc4c18b143572352fc922e",
"paragraphs":[
{
"id":"0d23868db06847a1800d8ef8659887f3",
"path":[
"rliterate.py",
"<<classes>>",
"<<Page>>"
],
"text":"def _render(self):\n    self.sizer = wx.BoxSizer(wx.VERTICAL)\n    self.SetSizer(self.sizer)\n    self.drop_points = []\n    page = self.project.get_page(self.page_id)\n    divider = self._render_paragraph(Title(self, self.project, page))\n    for paragraph in page.paragraphs:\n        self.drop_points.append(PageDropPoint(\n            divider=divider,\n            page_id=self.page_id,\n            next_paragraph_id=paragraph.id\n        ))\n        divider = self._render_paragraph({\n            \"text\": Text,\n            \"quote\": Quote,\n            \"list\": List,\n            \"code\": Code,\n            \"image\": Image,\n            \"factory\": Factory,\n        }[paragraph.type](self, self.project, self.page_id, paragraph))\n    self.drop_points.append(PageDropPoint(\n        divider=divider,\n        page_id=self.page_id,\n        next_paragraph_id=None\n    ))\n    self._render_add_button()\n\ndef _render_paragraph(self, paragraph):\n    self.sizer.Add(paragraph, flag=wx.EXPAND)\n    divider = Divider(self, padding=(PARAGRAPH_SPACE-3)/2, height=3)\n    self.sizer.Add(divider, flag=wx.EXPAND)\n    return divider\n\ndef _render_add_button(self):\n    add_button = wx.BitmapButton(\n        self,\n        bitmap=wx.ArtProvider.GetBitmap(\n            wx.ART_ADD_BOOKMARK,\n            wx.ART_BUTTON,\n            (16, 16)\n        ),\n        style=wx.NO_BORDER\n    )\n    add_button.Bind(wx.EVT_BUTTON, self._on_add_button)\n    self.sizer.Add(\n        add_button,\n        flag=wx.TOP|wx.ALIGN_RIGHT,\n        border=PARAGRAPH_SPACE\n    )\n\ndef _on_add_button(self, event):\n    self.project.add_paragraph(self.page_id)\n",
"type":"code"
},
{
"id":"ceac79cd0d6f400ba9d4be19e8e79672",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class PageDropPoint(object):\n\n    def __init__(self, divider, page_id, next_paragraph_id):\n        self.divider = divider\n        self.page_id = page_id\n        self.next_paragraph_id = next_paragraph_id\n\n    def y_distance_to(self, y):\n        return abs(self.divider.Position.y + self.divider.Size[1]/2 - y)\n\n    def Show(self):\n        self.divider.Show()\n\n    def Hide(self):\n        self.divider.Hide()",
"type":"code"
}
],
"title":"Rendering"
},
{
"children":[],
"id":"9d0b1c1dc456410180edbb1a45fb56cb",
"paragraphs":[
{
"id":"92c41fd20a1d4511ad864bbfd315aa88",
"path":[
"rliterate.py",
"<<classes>>",
"<<Page>>"
],
"text":"def FindClosestDropPoint(self, screen_pos):\n    client_pos = (client_x, client_y) = self.ScreenToClient(screen_pos)\n    if self.HitTest(client_pos) == wx.HT_WINDOW_INSIDE:\n        return min_or_none(\n            self.drop_points,\n            key=lambda drop_point: drop_point.y_distance_to(client_y)\n        )\n",
"type":"code"
}
],
"title":"Dropping paragraphs"
}
],
"id":"eb6360eff66245daa2fe09b04bbbc120",
"paragraphs":[
{
"id":"1994c9452817497c92e1d51cf6a050bc",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class PagePanel(wx.Panel):\n\n    def __init__(self, parent, project, page_id):\n        wx.Panel.__init__(self, parent)\n        self.project = project\n        self.page_id = page_id\n        self._render()\n\n    <<Page>>\n",
"type":"code"
}
],
"title":"Page"
},
{
"children":[],
"id":"f1137543026a4319a6a9e2ce5d0f3d5e",
"paragraphs":[
{
"fragments":[
{
"text":"The title widget is an ",
"type":"text"
},
{
"page_id":"33398a32e9c0460d98d0ada485f19067",
"text":"editable",
"type":"reference"
},
{
"text":" that displays the page title in bigger text.",
"type":"text"
}
],
"id":"da175bc1c650467c8ae17633c39ae50a",
"type":"text"
},
{
"id":"24ce3a2a4785432ea263e18f55bfa106",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Title(Editable):\n\n    def __init__(self, parent, project, page):\n        self.page = page\n        Editable.__init__(self, parent, project)\n        self._selection = (0, 0)\n\n    def CreateView(self):\n        self.Font = create_font(size=16)\n        view = TokenView(\n            self,\n            self.project,\n            [Token(self.page.title)],\n            max_width=PAGE_BODY_WIDTH\n        )\n        MouseEventHelper.bind(\n            [view],\n            double_click_pos=lambda pos: self._post_edit_start_from_token_view(pos)\n        )\n        return view\n\n    def _post_edit_start_from_token_view(self, pos):\n        edge_token = self.view.GetClosestToken(pos)\n        if edge_token is not None:\n            edge, token = edge_token\n            start = token.index\n            if edge < 0:\n                self._selection = (start, start)\n            elif edge > 0:\n                self._selection = (start+len(token.text), start+len(token.text))\n            else:\n                self._selection = (start, start+len(token.text))\n        post_edit_start(self.view)\n\n    def CreateEdit(self):\n        edit = wx.TextCtrl(self, style=wx.TE_PROCESS_ENTER, value=self.page.title)\n        edit.Save = lambda: self.page.set_title(self.edit.Value)\n        wx.CallAfter(lambda: edit.SetSelection(*self._selection))\n        return edit",
"type":"code"
},
{
"fragments":[
{
"text":"wx.CallAfter",
"type":"code"
},
{
"text":" seems to be needed for the selection to actually be set. No idea why.",
"type":"text"
}
],
"id":"2f38ae9584e74c4ca6a18bcf9467dc76",
"type":"text"
}
],
"title":"Title"
},
{
"children":[
{
"children":[],
"id":"1688f5eee57645a68af81fa5f02a1560",
"paragraphs":[
{
"fragments":[
{
"text":"This paragraph is of type ",
"type":"text"
},
{
"page_id":"2572c635a4c04bcc97905362edc3aba2",
"text":"text",
"type":"reference"
},
{
"text":".",
"type":"text"
}
],
"id":"ad7205c2fdf24c87886bd053bcc87dab",
"type":"text"
},
{
"id":"7446201f4c6d46f3b33d94f4f36503d2",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Text(ParagraphBase):\n\n    def CreateView(self):\n        return TextView(\n            self,\n            self.project,\n            self.paragraph.tokens,\n            self\n        )\n\n    def CreateEdit(self):\n        return TextEdit(\n            self,\n            self.project,\n            self.paragraph,\n            self.view\n        )\n\n    def AddContextMenuItems(self, menu):\n        menu.AppendItem(\n            \"To quote\",\n            lambda: self.paragraph.update({\"type\": \"quote\"})\n        )\n",
"type":"code"
},
{
"fragments":[
{
"text":"The view:",
"type":"text"
}
],
"id":"7771215ada52498a87873fe98b069d66",
"type":"text"
},
{
"id":"bb3cb1f635d4476a9f796aa6d9f3845d",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TextView(TokenView):\n\n    def __init__(self, parent, project, tokens, base, indented=0):\n        TokenView.__init__(\n            self,\n            parent,\n            project,\n            tokens,\n            line_height=1.2,\n            max_width=PAGE_BODY_WIDTH-indented,\n            skip_extra_space=True\n        )\n        MouseEventHelper.bind(\n            [self],\n            drag=base.DoDragDrop,\n            right_click=base.ShowContextMenu,\n            double_click=lambda: post_edit_start(self),\n            move=self._on_mouse_move,\n            click=self._on_click\n        )\n        self.token = None\n\n    def _on_mouse_move(self, position):\n        token = self.GetToken(position)\n        if token is not self.token:\n            self.token = token\n            post_hovered_token_changed(self, self.token)\n\n    def _on_click(self):\n        if self.token is not None:\n            post_token_click(self, self.token)",
"type":"code"
},
{
"id":"34a2a998616e4f6f93b325bcf361b57f",
"path":[
"rliterate.py",
"<<constants>>"
],
"text":"TokenClick, EVT_TOKEN_CLICK = wx.lib.newevent.NewCommandEvent()\n",
"type":"code"
},
{
"id":"f0ef454c41b0452d8ae299eb2694dc79",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def post_token_click(widget, token):\n    wx.PostEvent(widget, TokenClick(0, widget=widget, token=token))\n",
"type":"code"
},
{
"id":"d9cecc0ae947469d8799e6427b0cbfa2",
"path":[
"rliterate.py",
"<<constants>>"
],
"text":"HoveredTokenChanged, EVT_HOVERED_TOKEN_CHANGED = wx.lib.newevent.NewCommandEvent()",
"type":"code"
},
{
"id":"b982737c98b04b04bca93dd079d3003c",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def post_hovered_token_changed(widget, token):\n    wx.PostEvent(widget, HoveredTokenChanged(0, widget=widget, token=token))\n",
"type":"code"
},
{
"fragments":[
{
"text":"The editor:",
"type":"text"
}
],
"id":"0dfb3ea73ab040ec9ce4a0c9eecaba27",
"type":"text"
},
{
"id":"7cc47c031e0242aa98658e84c51e5418",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TextEdit(MultilineTextCtrl):\n\n    def __init__(self, parent, project, paragraph, view):\n        MultilineTextCtrl.__init__(\n            self,\n            parent,\n            value=paragraph.text_version,\n            size=(-1, view.Size[1])\n        )\n        if not hasattr(view, \"token\"):\n            self.SetSelection(0, 0)\n        elif view.token is None:\n            self.SetSelection(0, 0)\n        else:\n            index = paragraph.get_text_index(view.token.extra[\"fragment_index\"])\n            start = index + view.token.index\n            end = start + len(view.token.text)\n            self.SetSelection(start, end)\n        self.Font = create_font(monospace=True)\n        self.project = project\n        self.paragraph = paragraph\n\n    def Save(self):\n        self.paragraph.text_version = self.Value\n",
"type":"code"
}
],
"title":"Text"
},
{
"children":[],
"id":"7a79cf8e89e54505a3096182df3969de",
"paragraphs":[
{
"fragments":[
{
"text":"A quote paragraph is the same as a text paragraph but the view is rendered indented.",
"type":"text"
}
],
"id":"2f672cd613c84c2c9bbd113672956163",
"type":"text"
},
{
"id":"bd65127796664140bf2823ed50b27f87",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Quote(Text):\n\n    INDENT = 20\n\n    def CreateView(self):\n        view = wx.Panel(self)\n        self.text_view = TextView(\n            view,\n            self.project,\n            self.paragraph.tokens,\n            self,\n            indented=self.INDENT\n        )\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add((self.INDENT, 1))\n        sizer.Add(self.text_view, flag=wx.EXPAND, proportion=1)\n        view.SetSizer(sizer)\n        return view\n\n    def CreateEdit(self):\n        self.view.token = self.text_view.token\n        return Text.CreateEdit(self)\n\n    def AddContextMenuItems(self, menu):\n        menu.AppendItem(\n            \"To text\",\n            lambda: self.paragraph.update({\"type\": \"text\"})\n        )",
"type":"code"
}
],
"title":"Quote"
},
{
"children":[],
"id":"f1a44b0e5e824e7baba3a2ca256b243b",
"paragraphs":[
{
"fragments":[
{
"text":"A list paragraph is the same as a text paragraph but renders differently. With bullets and indentation.",
"type":"text"
}
],
"id":"50911d0525dd4f38adc52e1108754007",
"type":"text"
},
{
"id":"8d490d7f70f74eea91eee4feb06f777c",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class List(ParagraphBase):\n\n    INDENT = 20\n\n    def CreateView(self):\n        view = wx.Panel(self)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        self.add_items(view, sizer, self.paragraph.children, self.paragraph.child_type)\n        view.SetSizer(sizer)\n        return view\n\n    def CreateEdit(self):\n        return TextEdit(\n            self,\n            self.project,\n            self.paragraph,\n            self.view\n        )\n\n    def add_items(self, view, sizer, items, child_type, indent=0):\n        for index, item in enumerate(items):\n            inner_sizer = wx.BoxSizer(wx.HORIZONTAL)\n            inner_sizer.Add((self.INDENT*indent, 1))\n            bullet = self._create_bullet_widget(view, child_type, index)\n            inner_sizer.Add(bullet)\n            inner_sizer.Add(\n                TextView(\n                    view,\n                    self.project,\n                    item.tokens,\n                    self,\n                    indented=self.INDENT*indent+bullet.GetMinSize()[0]\n                ),\n                proportion=1\n            )\n            sizer.Add(inner_sizer, flag=wx.EXPAND)\n            self.add_items(view, sizer, item.children, item.child_type, indent+1)\n\n    def _create_bullet_widget(self, view, list_type, index):\n        return TokenView(\n            view,\n            self.project,\n            [Token(self._get_bullet_text(list_type, index))]\n        )\n\n    def _get_bullet_text(self, list_type, index):\n        if list_type == \"ordered\":\n            return \"{}. \".format(index + 1)\n        else:\n            return u\"\\u2022 \"\n",
"type":"code"
}
],
"title":"List"
},
{
"children":[],
"id":"91969238a9d24673aec5bc1c8bc8bd7b",
"paragraphs":[
{
"id":"1e77735cb0fe409683695b5339204a23",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Code(ParagraphBase):\n\n    def CreateView(self):\n        return CodeView(self, self.project, self.paragraph, self)\n\n    def CreateEdit(self):\n        return CodeEditor(self, self.project, self.paragraph, self.view)\n",
"type":"code"
},
{
"fragments":[
{
"text":"The view:",
"type":"text"
}
],
"id":"0db2311ab3404ba0a7096f9f28d9a38e",
"type":"text"
},
{
"id":"397eb97b4763418c9e8e4a8cbcb75a72",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class CodeView(wx.Panel):\n\n    BORDER = 0\n    PADDING = 5\n\n    def __init__(self, parent, project, paragraph, base):\n        wx.Panel.__init__(self, parent)\n        self.project = project\n        self.base = base\n        self.Font = create_font(monospace=True)\n        self.vsizer = wx.BoxSizer(wx.VERTICAL)\n        if paragraph.has_path:\n            self.vsizer.Add(\n                self._create_path(paragraph),\n                flag=wx.ALL|wx.EXPAND, border=self.BORDER\n            )\n        self.vsizer.Add(\n            self._create_code(paragraph),\n            flag=wx.LEFT|wx.BOTTOM|wx.RIGHT|wx.EXPAND, border=self.BORDER\n        )\n        self.SetSizer(self.vsizer)\n        self.SetBackgroundColour((243, 236, 219))\n\n    def _create_path(self, paragraph):\n        panel = wx.Panel(self)\n        panel.SetBackgroundColour((248, 241, 223))\n        text = TokenView(\n            panel,\n            self.project,\n            insert_between(\n                Token(\" / \"),\n                [Token(x, token_type=TokenType.RLiterate.Strong) for x in paragraph.path]\n            ),\n            max_width=PAGE_BODY_WIDTH-2*self.PADDING\n        )\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(text, flag=wx.ALL|wx.EXPAND, border=self.PADDING)\n        panel.SetSizer(sizer)\n        MouseEventHelper.bind(\n            [panel, text],\n            double_click=self._post_paragraph_edit_start,\n            drag=self.base.DoDragDrop,\n            right_click=self.base.ShowContextMenu\n        )\n        return panel\n\n    def _create_code(self, paragraph):\n        panel = wx.Panel(self)\n        panel.SetBackgroundColour((253, 246, 227))\n        body = TokenView(\n            panel,\n            self.project,\n            paragraph.tokens,\n            max_width=PAGE_BODY_WIDTH-2*self.PADDING\n        )\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(body, flag=wx.ALL|wx.EXPAND, border=self.PADDING, proportion=1)\n        panel.SetSizer(sizer)\n        MouseEventHelper.bind(\n            [panel, body],\n            double_click=self._post_paragraph_edit_start,\n            drag=self.Parent.DoDragDrop,\n            right_click=self.Parent.ShowContextMenu\n        )\n        return panel\n\n    def _post_paragraph_edit_start(self):\n        post_edit_start(self)\n",
"type":"code"
},
{
"id":"7b087c5b9fd0460088e21aa2dc47567f",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def insert_between(separator, items):\n    result = []\n    for i, item in enumerate(items):\n        if i > 0:\n            result.append(separator)\n        result.append(item)\n    return result\n",
"type":"code"
},
{
"fragments":[
{
"text":"The editor:",
"type":"text"
}
],
"id":"8d090339156c477e9d4e39c825412f6d",
"type":"text"
},
{
"id":"f7d289a713724b6a94edb96f4d823e90",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class CodeEditor(wx.Panel):\n\n    BORDER = 1\n    PADDING = 3\n\n    def __init__(self, parent, project, paragraph, view):\n        wx.Panel.__init__(self, parent)\n        self.Font = create_font(monospace=True)\n        self.project = project\n        self.paragraph = paragraph\n        self.view = view\n        self.vsizer = wx.BoxSizer(wx.VERTICAL)\n        self.vsizer.Add(\n            self._create_path(paragraph),\n            flag=wx.ALL|wx.EXPAND, border=self.BORDER\n        )\n        self.vsizer.Add(\n            self._create_code(paragraph),\n            flag=wx.LEFT|wx.BOTTOM|wx.RIGHT|wx.EXPAND, border=self.BORDER\n        )\n        self.SetSizer(self.vsizer)\n\n    def _create_path(self, paragraph):\n        self.path = wx.TextCtrl(\n            self,\n            value=\" / \".join(paragraph.path)\n        )\n        return self.path\n\n    def _create_code(self, paragraph):\n        self.text = MultilineTextCtrl(\n            self,\n            value=paragraph.text,\n            size=(-1, self.view.Size[1])\n        )\n        return self.text\n\n    def Save(self):\n        self.paragraph.update({\n            \"path\": self.path.Value.split(\" / \"),\n            \"text\": self.text.Value,\n        })\n",
"type":"code"
}
],
"title":"Code"
},
{
"children":[],
"id":"481bf98c4af44f3e8fc6869d3c9b8a36",
"paragraphs":[
{
"fragments":[
{
"text":"Data is defined in ",
"type":"text"
},
{
"page_id":"0d0e076c5ebc4b338ab01229ef37a8ea",
"text":null,
"type":"reference"
},
{
"text":".",
"type":"text"
}
],
"id":"03a0a27ff06a4a3592da6869b5afa212",
"type":"text"
},
{
"id":"8856d2dc36b846f8a763ab7e2bdef323",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Image(ParagraphBase):\n\n    PADDING = 30\n\n    def CreateView(self):\n        view = wx.Panel(self)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        bitmap = wx.StaticBitmap(\n            view,\n            bitmap=base64_to_bitmap(self.paragraph.image_base64)\n        )\n        sizer.Add(\n            bitmap,\n            flag=wx.ALIGN_CENTER\n        )\n        sizer.Add(\n            TextView(\n                view,\n                self.project,\n                self.paragraph.tokens,\n                self,\n                indented=2*self.PADDING\n            ),\n            flag=wx.ALIGN_CENTER\n        )\n        view.SetSizer(sizer)\n        MouseEventHelper.bind(\n            [view, bitmap],\n            double_click=lambda: post_edit_start(view),\n        )\n        return view\n\n    def CreateEdit(self):\n        return ImageEdit(\n            self,\n            self.project,\n            self.paragraph,\n            self.view\n        )\n",
"type":"code"
},
{
"id":"5615fbbaed2c4cffa7b87de2617c6c11",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ImageEdit(wx.Panel):\n\n    def __init__(self, parent, project, paragraph, view):\n        wx.Panel.__init__(self, parent)\n        self.Font = create_font(monospace=True)\n        self.project = project\n        self.paragraph = paragraph\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        self.image = wx.StaticBitmap(self, bitmap=base64_to_bitmap(paragraph.image_base64))\n        sizer.Add(self.image, flag=wx.ALIGN_CENTER)\n        self.text = MultilineTextCtrl(self, value=fragments_to_text(paragraph.fragments))\n        sizer.Add(self.text, flag=wx.EXPAND)\n        paste_button = wx.Button(self, label=\"Paste\")\n        paste_button.Bind(wx.EVT_BUTTON, self._on_paste)\n        sizer.Add(paste_button)\n        self.SetSizer(sizer)\n        self.image_base64 = None\n\n    def _on_paste(self, event):\n        image_data = wx.BitmapDataObject()\n        if wx.TheClipboard.Open():\n            success = wx.TheClipboard.GetData(image_data)\n            wx.TheClipboard.Close()\n        if success:\n            bitmap = image_data.GetBitmap()\n            self.image.SetBitmap(fit_image(wx.ImageFromBitmap(bitmap), PAGE_BODY_WIDTH).ConvertToBitmap())\n            self.image_base64 = bitmap_to_base64(bitmap)\n            self.GetTopLevelParent().ChildReRendered()\n\n    def Save(self):\n        value = {\"fragments\": text_to_fragments(self.text.Value)}\n        if self.image_base64:\n            value[\"image_base64\"] = self.image_base64\n        self.paragraph.update(value)\n",
"type":"code"
},
{
"id":"ff72ceb0dd194974bc63f3a74d4fdc08",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def base64_to_bitmap(data):\n    try:\n        image = fit_image(wx.ImageFromStream(\n            StringIO.StringIO(base64.b64decode(data)),\n            wx.BITMAP_TYPE_ANY\n        ), PAGE_BODY_WIDTH)\n        return image.ConvertToBitmap()\n    except:\n        return wx.ArtProvider.GetBitmap(\n            wx.ART_MISSING_IMAGE,\n            wx.ART_BUTTON,\n            (16, 16)\n        )\n",
"type":"code"
},
{
"id":"8855df49bf1442729afa8a0a610a9453",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def bitmap_to_base64(bitmap):\n    output = StringIO.StringIO()\n    image = wx.ImageFromBitmap(bitmap)\n    image.SaveStream(output, wx.BITMAP_TYPE_PNG)\n    return base64.b64encode(output.getvalue())\n",
"type":"code"
},
{
"id":"cdf63272c72849e18d7b13394122e243",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def fit_image(image, width):\n    if image.Width <= width:\n        return image\n    factor = float(width) / image.Width\n    return image.Scale(\n        int(image.Width*factor),\n        int(image.Height*factor),\n        wx.IMAGE_QUALITY_HIGH\n    )\n",
"type":"code"
}
],
"title":"Image"
},
{
"children":[],
"id":"e0ecf028bb904931882c2fe4694d87e2",
"paragraphs":[
{
"fragments":[
{
"text":"A factory can not be edited, so only the view is provided.",
"type":"text"
}
],
"id":"e36c95740f9840f09b3819aa281fedd6",
"type":"text"
},
{
"id":"5e54a4dc1241440c84a432b13ff071d9",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Factory(ParagraphBase):\n\n    def CreateView(self):\n        view = wx.Panel(self)\n        MouseEventHelper.bind(\n            [view],\n            drag=self.DoDragDrop,\n            right_click=self.ShowContextMenu\n        )\n        view.SetBackgroundColour((240, 240, 240))\n        self.vsizer = wx.BoxSizer(wx.VERTICAL)\n        self.hsizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.vsizer.Add(\n            wx.StaticText(view, label=\"Factory\"),\n            flag=wx.TOP|wx.ALIGN_CENTER,\n            border=PARAGRAPH_SPACE\n        )\n        self.vsizer.Add(\n            self.hsizer,\n            flag=wx.TOP|wx.ALIGN_CENTER,\n            border=PARAGRAPH_SPACE\n        )\n        self._add_button(\"Text\", {\n            \"type\": \"text\",\n            \"fragments\": [{\"type\": \"text\", \"text\": \"Enter text here...\"}],\n        })\n        self._add_button(\"Quote\", {\n            \"type\": \"quote\",\n            \"fragments\": [{\"type\": \"text\", \"text\": \"Enter quote here...\"}],\n        })\n        self._add_button(\"List\", {\n            \"type\": \"list\",\n            \"child_type\": \"unordered\",\n            \"children\": [{\n                \"child_type\": None,\n                \"children\": [],\n                \"fragments\": [{\"type\": \"text\", \"text\": \"Enter list item here...\"}],\n            }],\n        })\n        self._add_button(\"Code\", {\n            \"type\": \"code\",\n            \"path\": [],\n            \"text\": \"Enter code here...\",\n        })\n        self._add_button(\"Image\", {\n            \"type\": \"image\",\n            \"fragments\": [{\"type\": \"text\", \"text\": \"Enter image text here...\"}],\n        })\n        self.vsizer.AddSpacer(PARAGRAPH_SPACE)\n        view.SetSizer(self.vsizer)\n        return view\n\n    def _add_button(self, text, value):\n        def click_handler(event):\n            if self.project.active_editor is None:\n                self.paragraph.update(value)\n            else:\n                show_edit_in_progress_error(self)\n        button = wx.Button(self, label=text)\n        button.Bind(wx.EVT_BUTTON, click_handler)\n        self.hsizer.Add(button, flag=wx.ALL, border=2)\n",
"type":"code"
}
],
"title":"Factory"
},
{
"children":[],
"id":"31681e4c6b0e44de98f2c05a7718170a",
"paragraphs":[
{
"id":"39ada32fde3245e7baac32cb839fb4e2",
"path":[
"rliterate.py",
"<<base classes>>"
],
"text":"class ParagraphBase(Editable):\n\n    def __init__(self, parent, project, page_id, paragraph):\n        self.page_id = page_id\n        self.paragraph = paragraph\n        Editable.__init__(self, parent, project)\n\n    def DoDragDrop(self):\n        data = RliterateDataObject(\"paragraph\", {\n            \"page_id\": self.page_id,\n            \"paragraph_id\": self.paragraph.id,\n        })\n        drag_source = wx.DropSource(self)\n        drag_source.SetData(data)\n        result = drag_source.DoDragDrop(wx.Drag_DefaultMove)\n\n    def ShowContextMenu(self):\n        menu = ParagraphContextMenu()\n        menu.AppendItem(\n            \"New paragraph before\",\n            lambda: self.project.add_paragraph(\n                self.page_id,\n                before_id=self.paragraph.id\n            )\n        )\n        menu.AppendItem(\n            \"New paragraph after\",\n            lambda: self.project.add_paragraph(\n                self.page_id,\n                before_id=self.paragraph.next_id\n            )\n        )\n        menu.AppendItem(\n            \"Duplicate\",\n            lambda: self.paragraph.duplicate()\n        )\n        if hasattr(self.paragraph, \"text_version\"):\n            menu.AppendItem(\n                \"Edit in gvim\",\n                lambda: setattr(\n                    self.paragraph,\n                    \"text_version\",\n                    edit_in_gvim(\n                        self.paragraph.text_version,\n                        self.paragraph.filename\n                    )\n                )\n            )\n        menu.AppendSeparator()\n        self.AddContextMenuItems(menu)\n        menu.AppendSeparator()\n        menu.AppendItem(\n            \"Delete\",\n            lambda: self.paragraph.delete()\n        )\n        self.PopupMenu(menu)\n        menu.Destroy()\n\n    def AddContextMenuItems(self, menu):\n        pass\n",
"type":"code"
},
{
"id":"e054ba1012de4fb9af5685d26f2682b8",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ParagraphContextMenu(wx.Menu):\n\n    def AppendItem(self, text, fn):\n        self.Bind(\n            wx.EVT_MENU,\n            lambda event: fn(),\n            self.Append(wx.NewId(), text)\n        )\n",
"type":"code"
}
],
"title":"Paragraph base"
}
],
"id":"2280405b81c741cfa73d2629f1ef4b4b",
"paragraphs":[
{
"fragments":[
{
"text":"All paragraphs are ",
"type":"text"
},
{
"page_id":"33398a32e9c0460d98d0ada485f19067",
"text":"editables",
"type":"reference"
},
{
"text":".",
"type":"text"
}
],
"id":"d3cee89484754dec82eee787393cd916",
"type":"text"
}
],
"title":"Paragraphs"
},
{
"children":[],
"id":"33398a32e9c0460d98d0ada485f19067",
"paragraphs":[
{
"fragments":[
{
"text":"Editables are widgets that contain a view and an editor. When the editor is opened, the view is hidden and the editor is shown in its place. The editor is opened by posting an ",
"type":"text"
},
{
"text":"EditStart",
"type":"code"
},
{
"text":" event from the view. This is typically done from a double click event handler.",
"type":"text"
}
],
"id":"e8f297cc43c84f3589a18191088fd308",
"type":"text"
},
{
"fragments":[
{
"text":"This class should be inherited, and the ",
"type":"text"
},
{
"text":"CreateView",
"type":"code"
},
{
"text":" method should be implemented. ",
"type":"text"
},
{
"text":"CreateEdit",
"type":"code"
},
{
"text":" must also be inherited if ",
"type":"text"
},
{
"text":"EditStart",
"type":"code"
},
{
"text":" events are expected.",
"type":"text"
}
],
"id":"615380bc2ce240ada8493970597c68c8",
"type":"text"
},
{
"id":"79cd58077311436295ce672e07703388",
"path":[
"rliterate.py",
"<<base classes 1>>"
],
"text":"class Editable(wx.Panel):\n\n    def __init__(self, parent, project):\n        wx.Panel.__init__(self, parent)\n        self.project = project\n        self.view = self.CreateView()\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n        self.sizer.Add(self.view, flag=wx.EXPAND, proportion=1)\n        self.SetSizer(self.sizer)\n        self.view.Bind(EVT_EDIT_START, self.OnEditStart)\n\n    def OnEditStart(self, event):\n        if self.project.active_editor is not None:\n            show_edit_in_progress_error(self)\n            return\n        with flicker_free_drawing(self):\n            self.edit = self.CreateEdit()\n            self.edit.SetFocus()\n            self.sizer.Add(self.edit, flag=wx.EXPAND, proportion=1)\n            self.sizer.Hide(self.view)\n            self.GetTopLevelParent().ChildReRendered()\n            self.project.active_editor = self\n\n    def Save(self):\n        self.edit.Save()\n        self.project.active_editor = None\n\n    def Cancel(self):\n        with flicker_free_drawing(self):\n            self.edit.Destroy()\n            self.sizer.Show(self.view)\n            self.GetTopLevelParent().ChildReRendered()\n            self.project.active_editor = None",
"type":"code"
},
{
"id":"3e66b8a4eb5d4aba9fbfa7b6c4c025d5",
"path":[
"rliterate.py",
"<<constants>>"
],
"text":"EditStart, EVT_EDIT_START = wx.lib.newevent.NewCommandEvent()",
"type":"code"
},
{
"id":"cbf3b69a55b14a9ba8a1543e153dba86",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def post_edit_start(control):\n    wx.PostEvent(control, EditStart(0))",
"type":"code"
}
],
"title":"Editables"
}
],
"id":"4dd60465575c4297a25813f0478f15f9",
"paragraphs":[
{
"fragments":[
{
"text":"The workspace shows pages in the document. It is organized in columns, and each column can show multiple pages. The pages can also be edited from the workspace.",
"type":"text"
}
],
"id":"9c4aa635d5b841ff8cf2a0648a6aff6d",
"type":"text"
}
],
"title":"Workspace"
},
{
"children":[
{
"children":[],
"id":"de31abba62b94730be1653a4b9e76f44",
"paragraphs":[
{
"id":"6786b60a42784b3785585aebae5064cd",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class RliterateDataObject(wx.CustomDataObject):\n\n    def __init__(self, kind, json=None):\n        wx.CustomDataObject.__init__(self, \"rliterate/{}\".format(kind))\n        if json is not None:\n            self.set_json(json)\n\n    def set_json(self, data):\n        self.SetData(json.dumps(data))\n\n    def get_json(self):\n        return json.loads(self.GetData())",
"type":"code"
}
],
"title":"RLiterate data object"
},
{
"children":[],
"id":"1d623dc7a566477786012227b9790d81",
"paragraphs":[
{
"fragments":[
{
"text":"A drop target that can work with windows that supports ",
"type":"text"
},
{
"text":"FindClosestDropPoint",
"type":"code"
},
{
"text":".",
"type":"text"
}
],
"id":"e93d2e5b66864933ab1e184634965f9f",
"type":"text"
},
{
"id":"1ae68af41cdc472c848edf7b65cd9557",
"path":[
"rliterate.py",
"<<base classes>>"
],
"text":"class DropPointDropTarget(wx.DropTarget):\n\n    def __init__(self, window, kind):\n        wx.DropTarget.__init__(self)\n        self.window = window\n        self.last_drop_point = None\n        self.rliterate_data = RliterateDataObject(kind)\n        self.DataObject = self.rliterate_data\n\n    def OnDragOver(self, x, y, defResult):\n        self._hide_last_drop_point()\n        drop_point = self._find_closest_drop_point(x, y)\n        if drop_point is not None and defResult == wx.DragMove:\n            drop_point.Show()\n            self.last_drop_point = drop_point\n            return wx.DragMove\n        return wx.DragNone\n\n    def OnData(self, x, y, defResult):\n        self._hide_last_drop_point()\n        drop_point = self._find_closest_drop_point(x, y)\n        if drop_point is not None and self.GetData():\n            self.OnDataDropped(self.rliterate_data.get_json(), drop_point)\n        return defResult\n\n    def OnLeave(self):\n        self._hide_last_drop_point()\n\n    def _find_closest_drop_point(self, x, y):\n        return self.window.FindClosestDropPoint(\n            self.window.ClientToScreen((x, y))\n        )\n\n    def _hide_last_drop_point(self):\n        if self.last_drop_point is not None:\n            self.last_drop_point.Hide()\n            self.last_drop_point = None",
"type":"code"
}
],
"title":"Drop point drop target"
},
{
"children":[],
"id":"aaa60456f36c4c3cbb1d4389d3bf5352",
"paragraphs":[
{
"id":"e5b2434a29a64c10a347242181a98d3c",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Divider(wx.Panel):\n\n    def __init__(self, parent, padding=0, height=1):\n        wx.Panel.__init__(self, parent, size=(-1, height+2*padding))\n        self.line = wx.Panel(self, size=(-1, height))\n        self.line.SetBackgroundColour((255, 100, 0))\n        self.line.Hide()\n        self.hsizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.vsizer = wx.BoxSizer(wx.VERTICAL)\n        self.vsizer.AddStretchSpacer(1)\n        self.vsizer.Add(self.hsizer, flag=wx.EXPAND|wx.RESERVE_SPACE_EVEN_IF_HIDDEN)\n        self.vsizer.AddStretchSpacer(1)\n        self.SetSizer(self.vsizer)\n\n    def Show(self, left_space=0):\n        with flicker_free_drawing(self):\n            self.line.Show()\n            self.hsizer.Clear(False)\n            self.hsizer.Add((left_space, 1))\n            self.hsizer.Add(self.line, flag=wx.EXPAND, proportion=1)\n            self.Layout()\n\n    def Hide(self):\n        with flicker_free_drawing(self):\n            self.line.Hide()\n            self.Layout()\n",
"type":"code"
}
],
"title":"Divider"
}
],
"id":"a6e8ca0aa83d4829b15c0424be259022",
"paragraphs":[],
"title":"Drag & drop"
},
{
"children":[],
"id":"03a31fd01d22449da2450c36ede331c1",
"paragraphs":[
{
"id":"15f128565382486187e8699ba13fcb14",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def open_pages_gui(window, project, *args, **kwargs):\n    try:\n        project.open_pages(*args, **kwargs)\n    except EditInProgress:\n        show_edit_in_progress_error(window)\n",
"type":"code"
},
{
"id":"858941606e864431bb785f32f3d6a590",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def show_edit_in_progress_error(window):\n    dialog = wx.MessageDialog(\n        window,\n        \"An edit is already in progress.\",\n        style=wx.CENTRE|wx.ICON_ERROR|wx.OK\n    )\n    dialog.ShowModal()\n    dialog.Destroy()\n",
"type":"code"
}
],
"title":"Edit in progress utilities"
},
{
"children":[
{
"children":[],
"id":"68bd8a9e595b4c84b10d25865d1377ff",
"paragraphs":[
{
"id":"b888370be9654c4bb270014d549139db",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class MouseEventHelper(object):\n\n    @classmethod\n    def bind(cls, windows, drag=None, click=None, right_click=None,\n             double_click=None, double_click_pos=None, move=None):\n        for window in windows:\n            mouse_event_helper = cls(window)\n            if drag is not None:\n                mouse_event_helper.OnDrag = drag\n            if click is not None:\n                mouse_event_helper.OnClick = click\n            if right_click is not None:\n                mouse_event_helper.OnRightClick = right_click\n            if double_click_pos is not None:\n                mouse_event_helper.OnDoubleClickPos = double_click_pos\n            elif double_click is not None:\n                mouse_event_helper.OnDoubleClick = double_click\n            if move is not None:\n                mouse_event_helper.OnMove = move\n\n    def __init__(self, window):\n        self.down_pos = None\n        window.Bind(wx.EVT_LEFT_DOWN, self._on_left_down)\n        window.Bind(wx.EVT_MOTION, self._on_motion)\n        window.Bind(wx.EVT_LEFT_UP, self._on_left_up)\n        window.Bind(wx.EVT_LEFT_DCLICK, self._on_left_dclick)\n        window.Bind(wx.EVT_RIGHT_UP, self._on_right_up)\n\n    def OnDrag(self):\n        pass\n\n    def OnClick(self):\n        pass\n\n    def OnRightClick(self):\n        pass\n\n    def OnDoubleClick(self):\n        pass\n\n    def OnDoubleClickPos(self, position):\n        pass\n\n    def OnMove(self, position):\n        pass\n\n    def _on_left_down(self, event):\n        self.down_pos = event.Position\n\n    def _on_motion(self, event):\n        if self.down_pos is None:\n            self.OnMove(event.Position)\n        if self._should_drag(event.Position):\n            self.down_pos = None\n            self.OnDrag()\n\n    def _should_drag(self, pos):\n        if self.down_pos is not None:\n            diff = self.down_pos - pos\n            if abs(diff.x) > 2:\n                return True\n            if abs(diff.y) > 2:\n                return True\n        return False\n\n    def _on_left_up(self, event):\n        if self.down_pos is not None:\n            self.OnClick()\n        self.down_pos = None\n\n    def _on_left_dclick(self, event):\n        self.OnDoubleClick()\n        self.OnDoubleClickPos(event.Position)\n\n    def _on_right_up(self, event):\n        self.OnRightClick()\n",
"type":"code"
}
],
"title":"Mouse event helper"
},
{
"children":[],
"id":"f2fd8440f526447fbcd4442951435021",
"paragraphs":[
{
"fragments":[
{
"text":"The token view widget displays tokens with different styles. It does so by drawing text on a DC.",
"type":"text"
}
],
"id":"7286b9e86d644834b949ed82e6afb3ee",
"type":"text"
},
{
"id":"5569510f0ba84a3c8c970fd81304964a",
"path":[
"rliterate.py",
"<<base classes>>"
],
"text":"class TokenView(wx.Panel):\n    <<TokenView>>\n",
"type":"code"
},
{
"id":"1b458cc32c9444d7a16d19205948b38f",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>"
],
"text":"def __init__(self, parent, project, tokens, **kwargs):\n    wx.Panel.__init__(self, parent)\n    self.project = project\n    self.tokens = tokens\n    self.line_height = kwargs.get(\"line_height\", 1)\n    self.max_width = kwargs.get(\"max_width\", 100)\n    self.skip_extra_space = kwargs.get(\"skip_extra_space\", False)\n    <<__init__>>\n",
"type":"code"
},
{
"fragments":[
{
"text":"First, the token positions are calculated. For that a DC is needed. But the positions need to be calculated before we can draw on the panel, so a temporary memory DC is created.",
"type":"text"
}
],
"id":"44cdc54053dc4136ab337a605d8d0de8",
"type":"text"
},
{
"id":"2c5fccea05ca4f0caa6484a1667e7980",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>",
"<<__init__>>"
],
"text":"self._calculate_token_positions()",
"type":"code"
},
{
"id":"2d866dd174ea4e659741a72c91b59b49",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>"
],
"text":"def _calculate_token_positions(self):\n    dc = wx.MemoryDC()\n    dc.SetFont(self.GetFont())\n    dc.SelectObject(wx.EmptyBitmap(1, 1))\n    self.token_positions = []\n    x = 0\n    y = 0\n    max_x, max_y = dc.GetTextExtent(\"M\")\n    line_height_pixels = int(round(dc.GetTextExtent(\"M\")[1]*self.line_height))\n    for token in self.tokens:\n        for subtoken in token.split():\n            if subtoken.is_newline():\n                x = 0\n                y += line_height_pixels\n                max_y = max(max_y, y)\n                continue\n            style = self.project.get_style(subtoken.token_type)\n            style.apply_to_wx_dc(dc, self.GetFont())\n            w, h = dc.GetTextExtent(subtoken.text)\n            if x > 0 and x+w > self.max_width:\n                x = 0\n                y += line_height_pixels\n            if x == 0 and self.skip_extra_space:\n                if self.token_positions and self.token_positions[-1][0].is_space():\n                    self.token_positions.pop(-1)\n                if subtoken.is_space():\n                    continue\n            self.token_positions.append((subtoken, style, wx.Rect(x, y, w, h)))\n            max_x = max(max_x, x+w)\n            max_y = max(max_y, y+line_height_pixels)\n            x += w\n    self.SetMinSize((max_x, max_y))\n",
"type":"code"
},
{
"fragments":[
{
"text":"Drawing the tokens is just a matter of drawing all tokens at the pre-calculated positions:",
"type":"text"
}
],
"id":"e077531deeeb4cddbf5d03713a5232fe",
"type":"text"
},
{
"id":"548cace182ad42d6b8b08a5065bf79e6",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>",
"<<__init__>>"
],
"text":"self.Bind(wx.EVT_PAINT, self._on_paint)",
"type":"code"
},
{
"id":"bfc4f55298ea43dba7d1a94526901cdb",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>"
],
"text":"def _on_paint(self, event):\n    dc = wx.PaintDC(self)\n    for token, style, box in self.token_positions:\n        style.apply_to_wx_dc(dc, self.GetFont())\n        dc.DrawText(token.text, box.X, box.Y)\n",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"Token",
"type":"code"
},
{
"text":" class:",
"type":"text"
}
],
"id":"07b0bba6591049d09b863f470fccc782",
"type":"text"
},
{
"id":"75a8c2b60ac346e5be57b25dd5476f2d",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Token(object):\n\n    SPLIT_PATTERNS = [\n        re.compile(r\"\\n\"),\n        re.compile(r\"\\s+\"),\n        re.compile(r\"\\S+\"),\n    ]\n\n    def __init__(self, text, token_type=TokenType.RLiterate, index=0, **extra):\n        self.text = text\n        self.token_type = token_type\n        self.extra = extra\n        self.index = index\n\n    def is_newline(self):\n        return self.text == \"\\n\"\n\n    def is_space(self):\n        return re.match(r\"^\\s+$\", self.text)\n\n    def split(self):\n        index = self.index\n        subtokens = []\n        text = self.text\n        while text:\n            for split_pattern in self.SPLIT_PATTERNS:\n                match = split_pattern.match(text)\n                if match:\n                    subtokens.append(self._replace_text(match.group(0), index))\n                    text = text[match.end(0):]\n                    index += len(match.group(0))\n        return subtokens\n\n    def _replace_text(self, text, index):\n        return Token(\n            text=text,\n            token_type=self.token_type,\n            index=index,\n            **self.extra\n        )\n",
"type":"code"
},
{
"fragments":[
{
"text":"Some mouse move action:",
"type":"text"
}
],
"id":"388ab47120904655b45e8bab8c924eb2",
"type":"text"
},
{
"id":"4e27995451fd479f8a9528093ff49b0b",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>"
],
"text":"def GetToken(self, position):\n    for token, style, box in self.token_positions:\n        if box.Contains(position):\n            return token\n",
"type":"code"
},
{
"id":"2bfe590937df48d28415661a9a20f5b2",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>"
],
"text":"def GetClosestToken(self, position):\n    if len(self.token_positions) == 0:\n        return None\n    tokens_by_y_distance = defaultdict(list)\n    for token, style, box in self.token_positions:\n        if box.Contains(position):\n            tokens_by_y_distance[0] = [(token, box)]\n            break\n        tokens_by_y_distance[\n            abs(box.Y + int(box.Height / 2) - position.y)\n        ].append((token, box))\n    closest_token, closest_box = min(\n        tokens_by_y_distance[min(tokens_by_y_distance.keys())],\n        key=lambda (token, box): abs(box.X + int(box.Width / 2) - position.x)\n    )\n    center = closest_box.X + box.Width / 2\n    left_margin = center - box.Width / 4\n    right_margin = center + box.Width / 4\n    if position.x < left_margin:\n        edge = -1\n    elif position.x > right_margin:\n        edge = 1\n    else:\n        edge = 0\n    return (edge, closest_token)",
"type":"code"
},
{
"fragments":[
{
"text":"Cursor utilities:",
"type":"text"
}
],
"id":"c9b07488909047c68bf66ce3173af78a",
"type":"text"
},
{
"id":"ffc127ce05f14ea9924baad5d1009908",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>",
"<<__init__>>"
],
"text":"self._default_cursor = self.GetCursor()",
"type":"code"
},
{
"id":"1fa26d5bfc6040fd9cca7ebb87073987",
"path":[
"rliterate.py",
"<<base classes>>",
"<<TokenView>>"
],
"text":"def SetDefaultCursor(self):\n    self.SetCursor(self._default_cursor)",
"type":"code"
}
],
"title":"Token view"
},
{
"children":[],
"id":"94b57547a194415cb00feb2aaf486e27",
"paragraphs":[
{
"fragments":[
{
"text":"The default scrolling window gives extra space. See ",
"type":"text"
},
{
"text":"",
"type":"link",
"url":"https://stackoverflow.com/a/22817659"
},
{
"text":". This custom control solves this problem.",
"type":"text"
}
],
"id":"77379e702560445c9fd31a8bb833cc65",
"type":"text"
},
{
"id":"9bf32ef3ab984aca83e6ec65321388c7",
"path":[
"rliterate.py",
"<<base classes>>"
],
"text":"class CompactScrolledWindow(wx.ScrolledWindow):\n\n    MIN_WIDTH = 200\n    MIN_HEIGHT = 200\n\n    def __init__(self, parent, style=0, size=wx.DefaultSize, step=100):\n        w, h = size\n        size = (max(w, self.MIN_WIDTH), max(h, self.MIN_HEIGHT))\n        wx.ScrolledWindow.__init__(self, parent, style=style, size=size)\n        self.Size = size\n        if style == wx.HSCROLL:\n            self.SetScrollRate(1, 0)\n            self._calc_scroll_pos = self._calc_scroll_pos_hscroll\n        elif style == wx.VSCROLL:\n            self.SetScrollRate(0, 1)\n            self._calc_scroll_pos = self._calc_scroll_pos_vscroll\n        else:\n            self.SetScrollRate(1, 1)\n            self._calc_scroll_pos = self._calc_scroll_pos_vscroll\n        self.step = step\n        self.Bind(wx.EVT_MOUSEWHEEL, self._on_mousewheel)\n\n    def _on_mousewheel(self, event):\n        x, y = self.GetViewStart()\n        delta = event.GetWheelRotation() / event.GetWheelDelta()\n        self.Scroll(*self._calc_scroll_pos(x, y, delta))\n\n    def _calc_scroll_pos_hscroll(self, x, y, delta):\n        return (x+delta*self.step, y)\n\n    def _calc_scroll_pos_vscroll(self, x, y, delta):\n        return (x, y-delta*self.step)\n\n    <<CompactScrolledWindow>>\n",
"type":"code"
},
{
"fragments":[
{
"text":"The minimum size is set to prevent the following error:",
"type":"text"
}
],
"id":"9d06f89e91354cb68c08839512d0e156",
"type":"text"
},
{
"fragments":[
{
"text":"(rliterate.py:23983): Gtk-CRITICAL **: gtk_box_gadget_distribute: assertion 'size >= 0' failed in GtkScrollbar",
"type":"text"
}
],
"id":"025b7cd450434c9c98468f9f8720edc3",
"type":"text"
},
{
"id":"e34007a32f2d4df2986d366befc1fe78",
"path":[
"rliterate.py",
"<<base classes>>",
"<<CompactScrolledWindow>>"
],
"text":"def ScrollToBeginning(self):\n    self.Scroll(0, 0)\n\ndef ScrollToEnd(self):\n    self.Scroll(*self.Size)\n",
"type":"code"
}
],
"title":"Scrolling containers"
},
{
"children":[],
"id":"44395045b3cc4dbbbf9c7b2bb20447ed",
"paragraphs":[
{
"id":"178d81fd815d441080144e48eb3176c3",
"path":[
"rliterate.py",
"<<base classes>>"
],
"text":"class MultilineTextCtrl(wx.richtext.RichTextCtrl):\n\n    MIN_HEIGHT = 50\n\n    def __init__(self, parent, value, size=wx.DefaultSize):\n        w, h = size\n        size = (w, max(h, self.MIN_HEIGHT))\n        wx.richtext.RichTextCtrl.__init__(\n            self,\n            parent,\n            style=wx.richtext.RE_MULTILINE|wx.BORDER_SIMPLE,\n            value=value,\n            size=size\n        )",
"type":"code"
},
{
"fragments":[
{
"text":"The minimum height is set to prevent the following error:",
"type":"text"
}
],
"id":"341dcda05dc442cea21d7dd6089318ad",
"type":"text"
},
{
"fragments":[
{
"text":"Gtk-CRITICAL **: gtk_box_gadget_distribute: assertion 'size >= 0' failed in GtkScrollbar",
"type":"text"
}
],
"id":"3576819cf1444641a6f721127c50e4aa",
"type":"text"
},
{
"fragments":[
{
"text":"The regular multiline text control does not seem to support ",
"type":"text"
},
{
"text":"SetSelection",
"type":"code"
},
{
"text":" very well, so we use the rich text control instead.",
"type":"text"
}
],
"id":"f84e15a551d74aad88ddb54893097ed1",
"type":"text"
}
],
"title":"Multiline text control"
},
{
"children":[],
"id":"32b95f00956d4ea08e09d4a7d7fd4bb2",
"paragraphs":[
{
"fragments":[
{
"text":"This code seems to be needed on Windows only, but does not harm on other platforms. If many layout operations are done, the GUI otherwise becomes slow and flickers.",
"type":"text"
}
],
"id":"8858d0bc4faa47aa971b47a969c87f5b",
"type":"text"
},
{
"id":"a1614750c637409bb1f56849b5749e3f",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"@contextlib.contextmanager\ndef flicker_free_drawing(widget):\n    widget.Freeze()\n    yield\n    widget.Thaw()\n",
"type":"code"
}
],
"title":"Flicker free drawing"
}
],
"id":"5c3647a616b8495f8bebd268be84377d",
"paragraphs":[],
"title":"wxPython utilities"
},
{
"children":[],
"id":"4495f053ab2d41a2a4ec70f55e929b9f",
"paragraphs":[
{
"id":"e3e222b97d124ce0af6eba3cead75f90",
"path":[
"rliterate.py",
"<<constants>>"
],
"text":"PAGE_BODY_WIDTH = 600\nPAGE_PADDING = 13\nSHADOW_SIZE = 2\nPARAGRAPH_SPACE = 15\nCONTAINER_BORDER = PARAGRAPH_SPACE\n",
"type":"code"
}
],
"title":"Constants"
}
],
"id":"e418766e480b41b1844c8d754b3746fc",
"paragraphs":[
{
"fragments":[
{
"text":"The main GUI is written in wxPython.",
"type":"text"
}
],
"id":"a2e1e037cb3044b2a16bb15471199701",
"type":"text"
}
],
"title":"GUI wxPython"
},
{
"children":[
{
"children":[],
"id":"2f0a69c6ad7e4b84b4b3bfa55aebd182",
"paragraphs":[
{
"fragments":[
{
"text":"The document dict wrapper is a helper for working with a document dict.",
"type":"text"
}
],
"id":"86b37eee509b483aa0fb70c86ce7845a",
"type":"text"
},
{
"id":"a98a71cabc4942b885af73a3d49172ae",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class DocumentDictWrapper(dict):\n\n    def __init__(self, document_dict):\n        dict.__init__(self, document_dict)\n        self._pages = {}\n        self._parent_pages = {}\n        self._paragraphs = {}\n        self._cache_page(self)\n\n    def _cache_page(self, page, parent_page=None):\n        self._pages[page[\"id\"]] = page\n        self._parent_pages[page[\"id\"]] = parent_page\n        for paragraph in page[\"paragraphs\"]:\n            self._paragraphs[paragraph[\"id\"]] = paragraph\n        for child in page[\"children\"]:\n            self._cache_page(child, page)\n\n    def add_page_dict(self, page_dict, parent_id=None):\n        page_dict = copy.deepcopy(page_dict)\n        parent_page = self._pages[parent_id]\n        parent_page[\"children\"].append(page_dict)\n        self._pages[page_dict[\"id\"]] = page_dict\n        self._parent_pages[page_dict[\"id\"]] = parent_page\n\n    def get_page_dict(self, page_id=None):\n        if page_id is None:\n            page_id = self[\"id\"]\n        return self._pages.get(page_id, None)\n\n    def delete_page_dict(self, page_id):\n        if page_id == self[\"id\"]:\n            return\n        page = self._pages[page_id]\n        parent_page = self._parent_pages[page_id]\n        index = index_with_id(parent_page[\"children\"], page_id)\n        parent_page[\"children\"].pop(index)\n        self._pages.pop(page_id)\n        self._parent_pages.pop(page_id)\n        for child in reversed(page[\"children\"]):\n            parent_page[\"children\"].insert(index, child)\n            self._parent_pages[child[\"id\"]] = parent_page\n\n    def update_page_dict(self, page_id, data):\n        self._pages[page_id].update(copy.deepcopy(data))\n\n    def move_page_dict(self, page_id, parent_page_id, before_page_id):\n        if page_id == before_page_id:\n            return\n        parent = self._pages[parent_page_id]\n        while parent is not None:\n            if parent[\"id\"] == page_id:\n                return\n            parent = self._parent_pages[parent[\"id\"]]\n        parent = self._parent_pages[page_id]\n        page = parent[\"children\"].pop(index_with_id(parent[\"children\"], page_id))\n        new_parent = self._pages[parent_page_id]\n        self._parent_pages[page_id] = new_parent\n        if before_page_id is None:\n            new_parent[\"children\"].append(page)\n        else:\n            new_parent[\"children\"].insert(\n                index_with_id(new_parent[\"children\"], before_page_id),\n                page\n            )\n\n    def paragraph_dict_iterator(self):\n        return self._paragraphs.values()\n\n    def add_paragraph_dict(self, paragraph_dict, page_id, before_id):\n        paragraph_dict = copy.deepcopy(paragraph_dict)\n        paragraphs = self._pages[page_id][\"paragraphs\"]\n        if before_id is None:\n            paragraphs.append(paragraph_dict)\n        else:\n            paragraphs.insert(index_with_id(paragraphs, before_id), paragraph_dict)\n        self._paragraphs[paragraph_dict[\"id\"]] = paragraph_dict\n\n    def delete_paragraph_dict(self, page_id, paragraph_id):\n        paragraphs = self._pages[page_id][\"paragraphs\"]\n        paragraphs.pop(index_with_id(paragraphs, paragraph_id))\n        return self._paragraphs.pop(paragraph_id)\n\n    def move_paragraph_dict(self, page_id, paragraph_id, target_page, before_paragraph):\n        if (page_id == target_page and\n            paragraph_id == before_paragraph):\n            return\n        self.add_paragraph_dict(\n            self.delete_paragraph_dict(page_id, paragraph_id),\n            target_page,\n            before_paragraph\n        )\n\n    def update_paragraph_dict(self, paragraph_id, data):\n        self._paragraphs[paragraph_id].update(copy.deepcopy(data))\n",
"type":"code"
}
],
"title":"Document dict wrapper"
},
{
"children":[],
"id":"95df0269255943f297d3ffc6de48874f",
"paragraphs":[
{
"id":"176702fbbd7c4dd7a900d9cc06be0284",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>"
],
"text":"def add_page(self, title=\"New page\", parent_id=None):\n    with self.modify(\"Add page\") as document_dict:\n        document_dict.add_page_dict(self._empty_page(), parent_id=parent_id)\n\ndef _empty_page(self):\n    return {\n        \"id\": genid(),\n        \"title\": \"New page...\",\n        \"children\": [],\n        \"paragraphs\": [],\n    }\n",
"type":"code"
},
{
"id":"eca45154b3f141c794c1cf1e56f273ee",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>"
],
"text":"def get_page(self, page_id=None):\n    page_dict = self._document_dict.get_page_dict(page_id)\n    if page_dict is None:\n        return None\n    return Page(self, page_dict)\n",
"type":"code"
},
{
"id":"c73c7dd5a2804934a4786c1dd2a0b0d8",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Page(object):\n\n    def __init__(self, document, page_dict):\n        self._document = document\n        self._page_dict = page_dict\n\n    @property\n    def id(self):\n        return self._page_dict[\"id\"]\n\n    @property\n    def title(self):\n        return self._page_dict[\"title\"]\n\n    def set_title(self, title):\n        with self._document.modify(\"Change title\") as document_dict:\n            document_dict.update_page_dict(self.id, {\"title\": title})\n\n    @property\n    def paragraphs(self):\n        return [\n            Paragraph.create(\n                self._document,\n                self,\n                paragraph_dict,\n                next_paragraph_dict[\"id\"] if next_paragraph_dict is not None else None\n            )\n            for paragraph_dict, next_paragraph_dict\n            in zip(\n                self._page_dict[\"paragraphs\"],\n                self._page_dict[\"paragraphs\"][1:]+[None]\n            )\n        ]\n\n    @property\n    def children(self):\n        return [\n            Page(self._document, child_dict)\n            for child_dict\n            in self._page_dict[\"children\"]\n        ]\n\n    def delete(self):\n        with self._document.modify(\"Delete page\") as document_dict:\n            document_dict.delete_page_dict(self.id)\n\n    def move(self, parent_page_id, before_page_id):\n        with self._document.modify(\"Move page\") as document_dict:\n            document_dict.move_page_dict(self.id, parent_page_id, before_page_id)\n",
"type":"code"
}
],
"title":"Page"
},
{
"children":[
{
"children":[],
"id":"2572c635a4c04bcc97905362edc3aba2",
"paragraphs":[
{
"id":"0a73bece721f44899efa8c493dff8916",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TextParagraph(Paragraph):\n\n    @property\n    def fragments(self):\n        return TextFragment.create_list(self._document, self._paragraph_dict[\"fragments\"])\n\n    @property\n    def tokens(self):\n        return [x.token for x in self.fragments]\n\n    def get_text_index(self, fragment_index):\n        return fragments_to_text_with_index(\n            self.fragments,\n            fragment_index\n        )[1]\n\n    @property\n    def text_version(self):\n        return fragments_to_text(self.fragments)\n\n    @text_version.setter\n    def text_version(self, value):\n        self.update({\"fragments\": text_to_fragments(value)})",
"type":"code"
},
{
"id":"8b18fb0b9c4c49b0a2bd117d760f4d05",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def fragments_to_text(fragments):\n    return fragments_to_text_with_index(fragments)[0]\n\n\ndef fragments_to_text_with_index(fragments, fragment_index=0):\n    formatters = {\n        \"emphasis\":  lambda x: (\"*{}*\".format(x.text), 1),\n        \"code\":      lambda x: (\"`{}`\".format(x.text), 1),\n        \"strong\":    lambda x: (\"**{}**\".format(x.text), 2),\n        \"reference\": lambda x: (\"[[{}{}]]\".format(x.page_id, \":{}\".format(x.text) if x.text else \"\"), 2),\n        \"link\":      lambda x: (\"[{}]({})\".format(x.text, x.url), 1),\n    }\n    parts = []\n    text_index = 0\n    text_len = 0\n    for index, fragment in enumerate(fragments):\n        text, offset = formatters.get(fragment.type, lambda x: (x.text, 0))(fragment)\n        if index == fragment_index:\n            text_index = text_len + offset\n        parts.append(text)\n        text_len += len(text)\n    return (\"\".join(parts), text_index)\n\n\ndef text_to_fragments(text):\n    return LegacyInlineTextParser().parse(text)",
"type":"code"
}
],
"title":"Text"
},
{
"children":[],
"id":"c44416be38b441c88152c5b3cb1e07ed",
"paragraphs":[
{
"id":"d100b29a782d4eba870356391b6b032d",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class QuoteParagraph(TextParagraph):\n    pass",
"type":"code"
}
],
"title":"Quote"
},
{
"children":[],
"id":"4aeb570c789b4bea9580563407d0f94f",
"paragraphs":[
{
"id":"688f0da89af846a2b2de0a9a131fab3e",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ListParagraph(Paragraph):\n\n    @property\n    def child_type(self):\n        return self._paragraph_dict[\"child_type\"]\n\n    @property\n    def children(self):\n        return [ListItem(self._document, x) for x in self._paragraph_dict[\"children\"]]\n\n    @property\n    def text_version(self):\n        return list_to_text(self)\n\n    @text_version.setter\n    def text_version(self, value):\n        child_type, children = text_to_list(value)\n        self.update({\n            \"child_type\": child_type,\n            \"children\": children\n        })\n",
"type":"code"
},
{
"id":"b1df900b20ce4fd195ba8b9e6040ab24",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ListItem(object):\n\n    def __init__(self, document, item_dict):\n        self._document = document\n        self._item_dict = item_dict\n\n    @property\n    def fragments(self):\n        return TextFragment.create_list(self._document, self._item_dict[\"fragments\"])\n\n    @property\n    def child_type(self):\n        return self._item_dict[\"child_type\"]\n\n    @property\n    def children(self):\n        return [ListItem(self._document, x) for x in self._item_dict[\"children\"]]\n\n    @property\n    def tokens(self):\n        return [x.token for x in self.fragments]\n",
"type":"code"
},
{
"id":"126fbee10f774ea5a325a8ee855d4ae9",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def list_to_text(paragraph):\n    def list_item_to_text(child_type, item, indent=0, index=0):\n        text = \"    \"*indent\n        if child_type == \"ordered\":\n            text += \"{}. \".format(index+1)\n        else:\n            text += \"* \"\n        text += fragments_to_text(item.fragments)\n        text += \"\\n\"\n        for index, child in enumerate(item.children):\n            text += list_item_to_text(item.child_type, child, index=index, indent=indent+1)\n        return text\n    res = \"\"\n    for index, child in enumerate(paragraph.children):\n        res += list_item_to_text(paragraph.child_type, child, index=index)\n    return res\n\n\ndef text_to_list(text):\n    return LegacyListParser(text).parse_items()\n",
"type":"code"
}
],
"title":"List"
},
{
"children":[],
"id":"74b0c8c33aa0436cbd01d16e205a738c",
"paragraphs":[
{
"id":"40f7c112c54549b8851482fc2fafe614",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class CodeParagraph(Paragraph):\n\n    @property\n    def text_version(self):\n        return self.text\n\n    @text_version.setter\n    def text_version(self, value):\n        self.update({\"text\": value})\n\n    @property\n    def text(self):\n        return self._paragraph_dict[\"text\"]\n\n    @property\n    def tokens(self):\n        try:\n            lexer = self._get_lexer()\n        except:\n            lexer = pygments.lexers.TextLexer(stripnl=False)\n        return self._pygments_tokens_to_tokens(lexer.get_tokens(self.text))\n\n    @property\n    def has_path(self):\n        return len(\"\".join(self.path)) > 0\n\n    @property\n    def path(self):\n        return tuple(self._paragraph_dict[\"path\"])\n\n    @property\n    def filename(self):\n        last_part = \"\"\n        for part in self.path:\n            if part.startswith(\"<<\"):\n                break\n            last_part = part\n        return os.path.basename(last_part)\n\n    @property\n    def language(self):\n        try:\n            return \"\".join(self._get_lexer().aliases[:1])\n        except:\n            return \"\"\n\n    def _get_lexer(self):\n        return pygments.lexers.get_lexer_for_filename(\n            self.filename,\n            stripnl=False\n        )\n\n    def _pygments_tokens_to_tokens(self, pygments_tokens):\n        tokens = []\n        for pygments_token, text in pygments_tokens:\n            tokens.append(Token(text, token_type=pygments_token))\n        return tokens\n",
"type":"code"
}
],
"title":"Code"
},
{
"children":[],
"id":"0d0e076c5ebc4b338ab01229ef37a8ea",
"paragraphs":[
{
"id":"299a34e6b9654d51a1d9e3d7ba0644e5",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ImageParagraph(Paragraph):\n\n    @property\n    def fragments(self):\n        return TextFragment.create_list(self._document, self._paragraph_dict[\"fragments\"])\n\n    @property\n    def tokens(self):\n        return [x.token for x in self.fragments]\n\n    @property\n    def image_base64(self):\n        return self._paragraph_dict.get(\"image_base64\", None)\n\n    @property\n    def text_version(self):\n        return fragments_to_text(self.fragments)\n\n    @text_version.setter\n    def text_version(self, value):\n        self.update({\"fragments\": text_to_fragments(value)})\n",
"type":"code"
}
],
"title":"Image"
}
],
"id":"00d70d4faee841deba24ba21564eb11b",
"paragraphs":[
{
"id":"377391e542c6475a85cb59faffecfa47",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>"
],
"text":"def add_paragraph(self, page_id, before_id=None):\n    with self.modify(\"Add paragraph\") as document_dict:\n        paragraph = {\n            \"id\": genid(),\n            \"type\": \"factory\",\n        }\n        document_dict.add_paragraph_dict(paragraph, page_id, before_id=before_id)\n\ndef get_paragraph(self, page_id, paragraph_id):\n    for paragraph in self.get_page(page_id).paragraphs:\n        if paragraph.id == paragraph_id:\n            return paragraph\n",
"type":"code"
},
{
"id":"da88f3daf0d742e394fc3be9d21f522f",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Paragraph(object):\n\n    @staticmethod\n    def create(document, page, paragraph_dict, next_id):\n        return {\n            \"text\": TextParagraph,\n            \"quote\": QuoteParagraph,\n            \"list\": ListParagraph,\n            \"code\": CodeParagraph,\n            \"image\": ImageParagraph,\n        }.get(paragraph_dict[\"type\"], Paragraph)(document, page, paragraph_dict, next_id)\n\n    def __init__(self, document, page, paragraph_dict, next_id):\n        self._document = document\n        self._page = page\n        self._paragraph_dict = paragraph_dict\n        self._next_id = next_id\n\n    @property\n    def id(self):\n        return self._paragraph_dict[\"id\"]\n\n    @property\n    def next_id(self):\n        return self._next_id\n\n    @property\n    def type(self):\n        return self._paragraph_dict[\"type\"]\n\n    def update(self, data):\n        with self._document.modify(\"Edit paragraph\") as document_dict:\n            document_dict.update_paragraph_dict(self.id, data)\n\n    def delete(self):\n        with self._document.modify(\"Delete paragraph\") as document_dict:\n            document_dict.delete_paragraph_dict(self._page.id, self.id)\n\n    def move(self, target_page, before_paragraph):\n        with self._document.modify(\"Move paragraph\") as document_dict:\n            document_dict.move_paragraph_dict(self._page.id, self.id, target_page, before_paragraph)\n\n    def duplicate(self):\n        with self._document.modify(\"Duplicate paragraph\") as document_dict:\n            document_dict.add_paragraph_dict(\n                dict(self._paragraph_dict, id=genid()),\n                page_id=self._page.id,\n                before_id=self.next_id\n            )\n\n    @property\n    def filename(self):\n        return \"paragraph.txt\"\n",
"type":"code"
}
],
"title":"Paragraph"
},
{
"children":[
{
"children":[],
"id":"b641d595992543fc85687d7896220617",
"paragraphs":[
{
"id":"92b3f6cd19774f8a869d64d6faccde8f",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class StrongTextFragment(TextFragment):\n\n    @property\n    def token(self):\n        return Token(self.text, token_type=TokenType.RLiterate.Strong, fragment_index=self._index)",
"type":"code"
}
],
"title":"Strong"
},
{
"children":[],
"id":"9e0eca627a3d4f1b95334dca9d593a69",
"paragraphs":[
{
"id":"048849cf0f904e68b58972e5d22d98c3",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class EmphasisTextFragment(TextFragment):\n\n    @property\n    def token(self):\n        return Token(self.text, token_type=TokenType.RLiterate.Emphasis, fragment_index=self._index)",
"type":"code"
}
],
"title":"Emphasis"
},
{
"children":[],
"id":"31c4f554dbb64b089a1912316d3d631c",
"paragraphs":[
{
"id":"775c91cdff3d4977b1fd7dbc41642496",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class CodeTextFragment(TextFragment):\n\n    @property\n    def token(self):\n        return Token(self.text, token_type=TokenType.RLiterate.Code, fragment_index=self._index)",
"type":"code"
}
],
"title":"Code"
},
{
"children":[],
"id":"1cacb064ca4749ac9e6470dc14922deb",
"paragraphs":[
{
"id":"d68e50f52bc14653bd56b333ae0f0c76",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class ReferenceTextFragment(TextFragment):\n\n    @property\n    def page_id(self):\n        return self._text_fragment_dict[\"page_id\"]\n\n    @property\n    def title(self):\n        if self.text:\n            return self.text\n        if self._document.get_page(self.page_id) is not None:\n            return self._document.get_page(self.page_id).title\n        return self.page_id\n\n    @property\n    def token(self):\n        return Token(self.title, token_type=TokenType.RLiterate.Reference, page_id=self.page_id, fragment_index=self._index)",
"type":"code"
}
],
"title":"Reference"
},
{
"children":[],
"id":"5f86b5f969a642c08d1007b9dd71c242",
"paragraphs":[
{
"id":"3b5cca7618a34a1f8dd87227da24643b",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class LinkTextFragment(TextFragment):\n\n    @property\n    def url(self):\n        return self._text_fragment_dict[\"url\"]\n\n    @property\n    def title(self):\n        if self.text:\n            return self.text\n        return self.url\n\n    @property\n    def token(self):\n        return Token(self.title, token_type=TokenType.RLiterate.Link, url=self.url, fragment_index=self._index)",
"type":"code"
}
],
"title":"Link"
}
],
"id":"1b9444dcfcb94065a9c98f672484695d",
"paragraphs":[
{
"id":"dfa5a6b87808453888a9699ba0e62192",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class TextFragment(object):\n\n    @staticmethod\n    def create_list(document, text_fragment_dicts):\n        return [\n            TextFragment.create(document, text_fragment_dict, index)\n            for index, text_fragment_dict\n            in enumerate(text_fragment_dicts)\n        ]\n\n    @staticmethod\n    def create(document, text_fragment_dict, index):\n        return {\n            \"strong\": StrongTextFragment,\n            \"emphasis\": EmphasisTextFragment,\n            \"code\": CodeTextFragment,\n            \"reference\": ReferenceTextFragment,\n            \"link\": LinkTextFragment,\n        }.get(text_fragment_dict[\"type\"], TextFragment)(document, text_fragment_dict, index)\n\n    def __init__(self, document, text_fragment_dict, index):\n        self._document = document\n        self._text_fragment_dict = text_fragment_dict\n        self._index = index\n\n    @property\n    def type(self):\n        return self._text_fragment_dict[\"type\"]\n\n    @property\n    def text(self):\n        return self._text_fragment_dict[\"text\"]\n\n    @property\n    def token(self):\n        return Token(self.text, fragment_index=self._index)\n",
"type":"code"
}
],
"title":"Text fragment"
},
{
"children":[],
"id":"6d647124c8a04c018778a8efbe13acbf",
"paragraphs":[
{
"id":"961d16934f0b4e7eaadc6b15885ac8c1",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>",
"<<Post load>>"
],
"text":"for paragraph in self._document_dict.paragraph_dict_iterator():\n    if paragraph[\"type\"] in [\"text\", \"quote\", \"image\"] and \"text\" in paragraph:\n        paragraph[\"fragments\"] = LegacyInlineTextParser().parse(paragraph[\"text\"])\n        del paragraph[\"text\"]\n    elif paragraph[\"type\"] in [\"list\"] and \"text\" in paragraph:\n        paragraph[\"child_type\"], paragraph[\"children\"] = LegacyListParser(paragraph[\"text\"]).parse_items()\n        del paragraph[\"text\"]\n",
"type":"code"
},
{
"id":"ada4b8410e994cbe99e4617f810011b6",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class LegacyInlineTextParser(object):\n\n    SPACE_RE = re.compile(r\"\\s+\")\n    PATTERNS = [\n        (\n            re.compile(r\"\\*\\*(.+?)\\*\\*\", flags=re.DOTALL),\n            lambda parser, match: {\n                \"type\": \"strong\",\n                \"text\": match.group(1),\n            }\n        ),\n        (\n            re.compile(r\"\\*(.+?)\\*\", flags=re.DOTALL),\n            lambda parser, match: {\n                \"type\": \"emphasis\",\n                \"text\": match.group(1),\n            }\n        ),\n        (\n            re.compile(r\"`(.+?)`\", flags=re.DOTALL),\n            lambda parser, match: {\n                \"type\": \"code\",\n                \"text\": match.group(1),\n            }\n        ),\n        (\n            re.compile(r\"\\[\\[(.+?)(:(.+?))?\\]\\]\", flags=re.DOTALL),\n            lambda parser, match: {\n                \"type\": \"reference\",\n                \"text\": match.group(3),\n                \"page_id\": match.group(1),\n            }\n        ),\n        (\n            re.compile(r\"\\[(.*?)\\]\\((.+?)\\)\", flags=re.DOTALL),\n            lambda parser, match: {\n                \"type\": \"link\",\n                \"text\": match.group(1),\n                \"url\": match.group(2),\n            }\n        ),\n    ]\n\n    def parse(self, text):\n        text = self._normalise_space(text)\n        fragments = []\n        partial = \"\"\n        while text:\n            result = self._get_special_fragment(text)\n            if result is None:\n                partial += text[0]\n                text = text[1:]\n            else:\n                match, fragment = result\n                if partial:\n                    fragments.append({\"type\": \"text\", \"text\": partial})\n                    partial = \"\"\n                fragments.append(fragment)\n                text = text[match.end(0):]\n        if partial:\n            fragments.append({\"type\": \"text\", \"text\": partial})\n        return fragments\n\n    def _normalise_space(self, text):\n        return self.SPACE_RE.sub(\" \", text).strip()\n\n    def _get_special_fragment(self, text):\n        for pattern, fn in self.PATTERNS:\n            match = pattern.match(text)\n            if match:\n                return match, fn(self, match)\n",
"type":"code"
},
{
"id":"a9b66d3999c54833914377afb301bb57",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class LegacyListParser(object):\n\n    ITEM_START_RE = re.compile(r\"( *)([*]|\\d+[.]) (.*)\")\n\n    def __init__(self, text):\n        self.lines = text.strip().split(\"\\n\")\n\n    def parse_items(self, level=0):\n        items = []\n        list_type = None\n        while True:\n            type_and_item = self.parse_item(level)\n            if type_and_item is None:\n                return list_type, items\n            else:\n                item_type, item = type_and_item\n                if list_type is None:\n                    list_type = item_type\n                items.append(item)\n\n    def parse_item(self, level):\n        parts = self.consume_bodies()\n        next_level = level + 1\n        item_type = None\n        if self.lines:\n            match = self.ITEM_START_RE.match(self.lines[0])\n            if match:\n                matched_level = len(match.group(1))\n                if matched_level >= level:\n                    parts.append(match.group(3))\n                    self.lines.pop(0)\n                    parts.extend(self.consume_bodies())\n                    next_level = matched_level + 1\n                    if \"*\" in match.group(2):\n                        item_type = \"unordered\"\n                    else:\n                        item_type = \"ordered\"\n        if parts:\n            child_type, children = self.parse_items(next_level)\n            return (item_type, {\n                \"fragments\": LegacyInlineTextParser().parse(\" \".join(parts)),\n                \"children\": children,\n                \"child_type\": child_type,\n            })\n\n    def consume_bodies(self):\n        bodies = []\n        while self.lines:\n            if self.ITEM_START_RE.match(self.lines[0]):\n                break\n            else:\n                bodies.append(self.lines.pop(0))\n        return bodies\n",
"type":"code"
},
{
"id":"7075da194716490f8b586c811cbe6bb5",
"path":[
"test_rliterate.py",
"<<test cases>>"
],
"text":"def test_can_read_legacy_file_format_paragraph_had_text(tmpfile):\n    text = \"This **is** very *cool*. [[106af6f8665c45e8ab751993a6abc876:page]] is it. Some `code`. [link](http://example.com).\"\n    fragments = [\n        {\"type\": \"text\",      \"text\": \"This \"},\n        {\"type\": \"strong\",    \"text\": \"is\"},\n        {\"type\": \"text\",      \"text\": \" very \"},\n        {\"type\": \"emphasis\",  \"text\": \"cool\"},\n        {\"type\": \"text\",      \"text\": \". \"},\n        {\"type\": \"reference\", \"text\": \"page\", \"page_id\": \"106af6f8665c45e8ab751993a6abc876\"},\n        {\"type\": \"text\",      \"text\": \" is it. Some \"},\n        {\"type\": \"code\",      \"text\": \"code\"},\n        {\"type\": \"text\",      \"text\": \". \"},\n        {\"type\": \"link\",      \"text\": \"link\", \"url\": \"http://example.com\"},\n        {\"type\": \"text\",      \"text\": \".\"},\n    ]\n    write_json_to_file(tmpfile, {\n        \"title\": \"Root\",\n        \"children\": [],\n        \"id\": \"106af6f8665c45e8ab751993a6abc876\",\n        \"paragraphs\": [\n            {\"id\": \"abc1\", \"type\": \"text\", \"text\": text},\n            {\"id\": \"abc2\", \"type\": \"quote\", \"text\": text},\n            {\"id\": \"abc3\", \"type\": \"image\", \"text\": text, \"image_base64\": \"data\"},\n            {\"id\": \"abc4\", \"type\": \"list\", \"text\": \"\\n\".join([\n                \"* **a**{}\".format(text),\n                \"* **b**{}\".format(text),\n                \"    1. **c**{}\".format(text),\n                \"    1. **d**{}\".format(text),\n            ])},\n        ],\n    })\n    doc = Document.from_file(tmpfile)\n    with doc.notify():\n        pass\n    assert load_json_from_file(tmpfile) == {\n        \"title\": \"Root\",\n        \"children\": [],\n        \"id\": \"106af6f8665c45e8ab751993a6abc876\",\n        \"paragraphs\": [\n            {\"id\": \"abc1\", \"type\": \"text\", \"fragments\": fragments},\n            {\"id\": \"abc2\", \"type\": \"quote\", \"fragments\": fragments},\n            {\"id\": \"abc3\", \"type\": \"image\", \"fragments\": fragments, \"image_base64\": \"data\"},\n            {\"id\": \"abc4\", \"type\": \"list\", \"child_type\": \"unordered\", \"children\": [\n                {\"child_type\": None, \"children\": [], \"fragments\": [{\"type\": \"strong\", \"text\": \"a\"}]+fragments},\n                {\"child_type\": \"ordered\", \"children\": [\n                    {\"child_type\": None, \"children\": [], \"fragments\": [{\"type\": \"strong\", \"text\": \"c\"}]+fragments},\n                    {\"child_type\": None, \"children\": [], \"fragments\": [{\"type\": \"strong\", \"text\": \"d\"}]+fragments},\n                ], \"fragments\": [{\"type\": \"strong\", \"text\": \"b\"}]+fragments},\n            ]},\n        ],\n    }\n",
"type":"code"
}
],
"title":"Legacy inline text parser"
}
],
"id":"ce4dc071bada48bb9294c937631e0214",
"paragraphs":[
{
"fragments":[
{
"text":"An RLiterate document is a JSON object stored in a file. Its structure looks like this:",
"type":"text"
}
],
"id":"1f1c6f42d2ad47229c4411c0f1a824c8",
"type":"text"
},
{
"id":"60501b1422714246b4aa8cf33866c0ea",
"path":[
""
],
"text":"{\n  \"id\": \"106af6f8665c45e8ab751993a6abc876\",\n  \"title\": \"Root\",\n  \"paragraphs\": [\n    {\n      \"id\": \"8f0a9f84821540e89d7c9ca93ed0fbe7\",\n      \"type\": \"text\",\n      \"fragments\": [\n        {\"text\": \"This \", \"type\": \"text\" },\n        {\"text\": \"is\",    \"type\": \"strong\" },\n        {\"text\": \"cool\",  \"type\": \"emphasis\" }\n      ]\n    },\n    ...\n  ],\n  \"children\": [ ... ]\n}\n",
"type":"code"
},
{
"fragments":[
{
"text":"The root object represents a page. It has a unique id, a title, paragraphs, and child pages. Paragraphs also have unique ids and different attributes depending on type. (The text paragraph has a list of text fragments with different styles.)",
"type":"text"
}
],
"id":"80730ed23d8849329c521c7d42af624d",
"type":"text"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"Document",
"type":"code"
},
{
"text":" class provides a friendly interface for working with RLiterate documents.",
"type":"text"
}
],
"id":"3ead8c7f41df4980aa059fba6d715c3c",
"type":"text"
},
{
"id":"f488adc5a56f4b83bf43b66fef2c5545",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Document(Observable):\n    <<Document>>\n",
"type":"code"
},
{
"id":"8116a556f10f45ef9a46cd72be34e0af",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>"
],
"text":"@classmethod\ndef from_file(cls, path):\n    return cls(path)\n\ndef __init__(self, path):\n    Observable.__init__(self)\n    <<__init__>>\n",
"type":"code"
},
{
"fragments":[
{
"text":"Loading:",
"type":"text"
}
],
"id":"d46a68d807374208bfe62ab0014d955f",
"type":"text"
},
{
"id":"1b08f81f956d4a07bcf9bb5bd035227e",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>",
"<<__init__>>"
],
"text":"self._load(path)\n",
"type":"code"
},
{
"id":"4b50dfd6dcd64c59b9d3a53346944a5d",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>"
],
"text":"def _load(self, path):\n    if os.path.exists(path):\n        root_page = load_json_from_file(path)\n    else:\n        root_page = self._empty_page()\n    self._history = History(DocumentDictWrapper(root_page), size=10)\n    <<Post load>>\n\n@property\ndef _document_dict(self):\n    return self._history.value\n",
"type":"code"
},
{
"fragments":[
{
"text":"Modifying:",
"type":"text"
}
],
"id":"495763d06d964a2aab268548311d0ad9",
"type":"text"
},
{
"id":"f2c5232417964cbabc4f03f310b3a0a4",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>"
],
"text":"@contextlib.contextmanager\ndef modify(self, name):\n    with self.notify():\n        with self._history.new_value(name) as value:\n            yield value\n\ndef get_undo_operation(self):\n    def undo():\n        with self.notify():\n            self._history.back()\n    if self._history.can_back():\n        return (self._history.back_name(), undo)\n\ndef get_redo_operation(self):\n    def redo():\n        with self.notify():\n            self._history.forward()\n    if self._history.can_forward():\n        return (self._history.forward_name(), redo)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Saving:",
"type":"text"
}
],
"id":"01abd458b8a04bd7957621e8b3bc70c4",
"type":"text"
},
{
"id":"b3b9797ca57548e68c19f895842842eb",
"path":[
"rliterate.py",
"<<classes>>",
"<<Document>>",
"<<__init__>>"
],
"text":"self.listen(lambda event: write_json_to_file(path, self._document_dict))",
"type":"code"
}
],
"title":"Document"
},
{
"children":[
{
"children":[],
"id":"de04e2c0e4d241fd8c5e3d180099f27a",
"paragraphs":[
{
"fragments":[
{
"text":"Scratch pages where replaced by columns.",
"type":"text"
}
],
"id":"f7c7996646934b3ab24e208dc9d72ac9",
"type":"text"
},
{
"id":"046324b15fa5412a9fad2bc72e35bec5",
"path":[
"test_rliterate.py"
],
"text":"def test_reads_legacy_scratch_pages(tmpfile):\n    write_json_to_file(tmpfile, {\n        \"workspace\": {\n            \"scratch\": [\"abc\"],\n        }\n    })\n    layout = Layout(tmpfile)\n    layout.set_hoisted_page(None)\n    assert load_json_from_file(tmpfile)[\"workspace\"] == {\n        \"columns\": [\n            [\"abc\"],\n        ]\n    }\n",
"type":"code"
},
{
"id":"aa0db3fc90134e42ad571cbcc560730d",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>",
"<<__init__>>"
],
"text":"if \"scratch\" in self._workspace:\n    if not self._workspace[\"columns\"]:\n        self._workspace[\"columns\"] = [self._workspace[\"scratch\"]]\n    del self._workspace[\"scratch\"]\n",
"type":"code"
}
],
"title":"Legacy scratch pages"
}
],
"id":"f7f16199492c4bad80567c3a960b8bc9",
"paragraphs":[
{
"fragments":[
{
"text":"A layout knows the visual state of the program. It for example knows what pages are expanded/collapsed in the table of contents and what is shown in the workspace.",
"type":"text"
}
],
"id":"9a3a290dceb54196a4d1b107d7634ce6",
"type":"text"
},
{
"fragments":[
{
"text":"The layout is recorded in a JSON object that is serialized to disk as soon as something changes.",
"type":"text"
}
],
"id":"48d620f5656a4a3c9acc813a4ce656d9",
"type":"text"
},
{
"id":"e50b267f475a48d78b5ea92de3351960",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Layout(Observable):\n    <<Layout>>\n",
"type":"code"
},
{
"id":"5fa45b8aa7364565895d510ff7885da7",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>"
],
"text":"def __init__(self, path):\n    Observable.__init__(self)\n    self.listen(lambda event: write_json_to_file(path, self.data))\n    if os.path.exists(path):\n        self.data = load_json_from_file(path)\n    else:\n        self.data = {}\n    <<__init__>>\n",
"type":"code"
},
{
"fragments":[
{
"text":"The rest of this class provides methods for reading and writing the ",
"type":"text"
},
{
"text":"data",
"type":"code"
},
{
"text":" dict.",
"type":"text"
}
],
"id":"e76db32a5b6c45d8a05e036d12cf0c6c",
"type":"text"
},
{
"fragments":[
{
"text":"The hoisted page is stored in ",
"type":"text"
},
{
"text":"toc.hoisted_page_id",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"79a5b1ea5fa04b4db9e02ece3117e362",
"type":"text"
},
{
"id":"476b5bcbc1b540bb9ea853c3cbe6f590",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>",
"<<__init__>>"
],
"text":"self._toc = ensure_key(self.data, \"toc\", {})\n",
"type":"code"
},
{
"id":"e4c448026a024e2baaaeb19719227998",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>"
],
"text":"def get_hoisted_page(self):\n    return self._toc.get(\"hoisted_page_id\", None)\n\ndef set_hoisted_page(self, page_id):\n    with self.notify(\"toc\"):\n        self._toc[\"hoisted_page_id\"] = page_id\n",
"type":"code"
},
{
"fragments":[
{
"text":"The collapsed pages are stored in ",
"type":"text"
},
{
"text":"toc.collapsed",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"3d25d132c5f04df6b70d39fc30c7065e",
"type":"text"
},
{
"id":"ae0c47bdc6a642fbb95bcc589b0cc9c7",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>",
"<<__init__>>"
],
"text":"self._toc_collapsed = ensure_key(self._toc, \"collapsed\", [])",
"type":"code"
},
{
"id":"8694cd469e844edda4ab47a8faf804f2",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>"
],
"text":"def is_collapsed(self, page_id):\n    return page_id in self._toc_collapsed\n\ndef toggle_collapsed(self, page_id):\n    with self.notify(\"toc\"):\n        if page_id in self._toc_collapsed:\n            self._toc_collapsed.remove(page_id)\n        else:\n            self._toc_collapsed.append(page_id)\n",
"type":"code"
},
{
"fragments":[
{
"text":"The pages displayed in the columns in the workspace are stored in ",
"type":"text"
},
{
"text":"workspace.columns",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"881b5b9cc3f54fe381aa7862b804887a",
"type":"text"
},
{
"id":"1d659258e6534f148dfbada0dce21578",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>",
"<<__init__>>"
],
"text":"self._workspace = ensure_key(self.data, \"workspace\", {})",
"type":"code"
},
{
"id":"0d83575340f24f67af49175cb0a1db83",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>",
"<<__init__>>"
],
"text":"self._workspace_columns = ensure_key(self._workspace, \"columns\", [])\nself._workspace_columns_history = History(copy.deepcopy(self._workspace_columns), size=20)\n",
"type":"code"
},
{
"id":"d21e2540eb5547db8926f8b9e55ca2a7",
"path":[
"rliterate.py",
"<<classes>>",
"<<Layout>>"
],
"text":"@property\ndef columns(self):\n    return [column[:] for column in self._workspace_columns]\n\ndef open_pages(self, page_ids, column_index=None):\n    with self.notify(\"workspace\"):\n        with self._workspace_columns_history.new_value() as value:\n            if column_index is None:\n                column_index = len(self._workspace_columns)\n            value[column_index:] = [page_ids[:]]\n            self._workspace_columns[:] = value\n\ndef can_back(self):\n    return self._workspace_columns_history.can_back()\n\ndef back(self):\n    with self.notify(\"workspace\"):\n        self._workspace_columns_history.back()\n        self._workspace_columns[:] = self._workspace_columns_history.value\n\ndef can_forward(self):\n    return self._workspace_columns_history.can_forward()\n\ndef forward(self):\n    with self.notify(\"workspace\"):\n        self._workspace_columns_history.forward()\n        self._workspace_columns[:] = self._workspace_columns_history.value\n\ndef is_open(self, page_id):\n    for column in self.columns:\n        if page_id in column:\n            return True\n    return False\n",
"type":"code"
},
{
"fragments":[
{
"text":"Finally we have a utility function for ensuring that a specific key exists in a dictionary.",
"type":"text"
}
],
"id":"dc91f34cfa6747119042fc7878702d88",
"type":"text"
},
{
"id":"0c4994ee9c5f4fdc84aa96dfad6df784",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def ensure_key(a_dict, key, default):\n    if key not in a_dict:\n        a_dict[key] = default\n    return a_dict[key]\n",
"type":"code"
}
],
"title":"Layouts"
},
{
"children":[],
"id":"192db0d4b96e4162b3cf19f870ee287d",
"paragraphs":[
{
"fragments":[
{
"text":"Some parts of the application can be themed. Token types from pygments denote different things that can be styled.",
"type":"text"
}
],
"id":"7ca054a5e8564724925b9af8044c94ad",
"type":"text"
},
{
"id":"eb8c1e6d05664884b9404fd3bf68b315",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class BaseTheme(object):\n\n    def get_style(self, token_type):\n        if token_type in self.styles:\n            return self.styles[token_type]\n        return self.get_style(token_type.parent)\n",
"type":"code"
},
{
"id":"dbf00327a8ed40348d78004e82ef7d60",
"path":[
"rliterate.py",
"<<base classes>>"
],
"text":"class Style(object):\n\n    def __init__(self, color, bold=None, underlined=None, italic=False, monospace=False):\n        self.color = color\n        self.color_rgb = tuple([\n            int(x, 16)\n            for x\n            in (color[1:3], color[3:5], color[5:7])\n        ])\n        self.bold = bold\n        self.underlined = underlined\n        self.italic = italic\n        self.monospace = monospace\n\n    def apply_to_wx_dc(self, dc, base_font):\n        font = base_font\n        if self.bold:\n            font = font.Bold()\n        if self.underlined:\n            font = font.Underlined()\n        if self.italic:\n            font = font.Italic()\n        if self.monospace:\n            font = wx.Font(\n                pointSize=font.GetPointSize(),\n                family=wx.FONTFAMILY_TELETYPE,\n                style=font.GetStyle(),\n                weight=font.GetWeight(),\n                underline=font.GetUnderlined(),\n            )\n        dc.SetFont(font)\n        dc.SetTextForeground(self.color_rgb)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Here is a theme based on solarized. Mostly stolen from ",
"type":"text"
},
{
"text":"",
"type":"link",
"url":"https://github.com/honza/solarized-pygments/blob/master/solarized.py"
},
{
"text":".",
"type":"text"
}
],
"id":"ba6b0fa60e1042d9a1a7c90b02be31a8",
"type":"text"
},
{
"id":"0f2a7a8d1dad436c826c16d47073d1dd",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class SolarizedTheme(BaseTheme):\n\n    base03  = \"#002b36\"\n    base02  = \"#073642\"\n    base01  = \"#586e75\"\n    base00  = \"#657b83\"\n    base0   = \"#839496\"\n    base1   = \"#93a1a1\"\n    base2   = \"#eee8d5\"\n    base3   = \"#fdf6e3\"\n    yellow  = \"#b58900\"\n    orange  = \"#cb4b16\"\n    red     = \"#dc322f\"\n    magenta = \"#d33682\"\n    violet  = \"#6c71c4\"\n    blue    = \"#268bd2\"\n    cyan    = \"#2aa198\"\n    green   = \"#859900\"\n\n    text    = \"#2e3436\"\n\n    styles = {\n        TokenType:                     Style(color=base00),\n        TokenType.Keyword:             Style(color=green),\n        TokenType.Keyword.Constant:    Style(color=cyan),\n        TokenType.Keyword.Declaration: Style(color=blue),\n        TokenType.Keyword.Namespace:   Style(color=orange),\n        TokenType.Name.Builtin:        Style(color=red),\n        TokenType.Name.Builtin.Pseudo: Style(color=blue),\n        TokenType.Name.Class:          Style(color=blue),\n        TokenType.Name.Decorator:      Style(color=blue),\n        TokenType.Name.Entity:         Style(color=violet),\n        TokenType.Name.Exception:      Style(color=yellow),\n        TokenType.Name.Function:       Style(color=blue),\n        TokenType.String:              Style(color=cyan),\n        TokenType.Number:              Style(color=cyan),\n        TokenType.Operator.Word:       Style(color=green),\n        TokenType.Comment:             Style(color=base1),\n        TokenType.RLiterate:           Style(color=text),\n        TokenType.RLiterate.Emphasis:  Style(color=text, italic=True),\n        TokenType.RLiterate.Strong:    Style(color=text, bold=True),\n        TokenType.RLiterate.Code:      Style(color=text, monospace=True),\n        TokenType.RLiterate.Link:      Style(color=blue, underlined=True),\n        TokenType.RLiterate.Reference: Style(color=blue, italic=True),\n    }\n",
"type":"code"
}
],
"title":"Themes"
},
{
"children":[],
"id":"b376363cbd664a838d3bafb7bfae2281",
"paragraphs":[
{
"fragments":[
{
"text":"A project is a container for a few other objects:",
"type":"text"
}
],
"id":"af5fcddf1a684827aba22cb5ef8c2256",
"type":"text"
},
{
"id":"0ad6e197d56042de98b62fcfbba2f18b",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Project(Observable):\n\n    def __init__(self, filepath):\n        Observable.__init__(self)\n        <<Project/__init__>>\n        self.theme = SolarizedTheme()\n        self.document = Document.from_file(filepath)\n        self.document.listen(self.notify_forwarder(\"document\"))\n        self.layout = Layout(\".{}.layout\".format(filepath))\n        self.layout.listen(self.notify_forwarder(\"layout\"))\n        FileGenerator().set_document(self.document)\n\n    <<Project>>\n",
"type":"code"
},
{
"fragments":[
{
"text":"Wrapper methods for document:",
"type":"text"
}
],
"id":"d88d38993f69435a955b4e3280dd28f0",
"type":"text"
},
{
"id":"d782b500e984468489cd876d5b92529d",
"path":[
"rliterate.py",
"<<classes>>",
"<<Project>>"
],
"text":"def get_page(self, *args, **kwargs):\n    return self.document.get_page(*args, **kwargs)\n\ndef get_paragraph(self, *args, **kwargs):\n    return self.document.get_paragraph(*args, **kwargs)\n\ndef add_page(self, *args, **kwargs):\n    return self.document.add_page(*args, **kwargs)\n\ndef add_paragraph(self, *args, **kwargs):\n    return self.document.add_paragraph(*args, **kwargs)\n\ndef get_undo_operation(self, *args, **kwargs):\n    return self.document.get_undo_operation(*args, **kwargs)\n\ndef get_redo_operation(self, *args, **kwargs):\n    return self.document.get_redo_operation(*args, **kwargs)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Wrapper methods for layout:",
"type":"text"
}
],
"id":"b08235caad29483791eaab31b81fb215",
"type":"text"
},
{
"id":"82fdb1b7c5dc4a59909327365604260d",
"path":[
"rliterate.py",
"<<classes>>",
"<<Project>>"
],
"text":"def toggle_collapsed(self, *args, **kwargs):\n    return self.layout.toggle_collapsed(*args, **kwargs)\n\ndef is_collapsed(self, *args, **kwargs):\n    return self.layout.is_collapsed(*args, **kwargs)\n\n@property\ndef columns(self):\n    return self.layout.columns\n\ndef is_open(self, *args, **kwargs):\n    return self.layout.is_open(*args, **kwargs)\n\ndef open_pages(self, *args, **kwargs):\n    if self.active_editor is None:\n        return self.layout.open_pages(*args, **kwargs)\n    else:\n        raise EditInProgress()\n\ndef can_back(self, *args, **kwargs):\n    return self.layout.can_back(*args, **kwargs)\n\ndef back(self, *args, **kwargs):\n    return self.layout.back(*args, **kwargs)\n\ndef can_forward(self, *args, **kwargs):\n    return self.layout.can_forward(*args, **kwargs)\n\ndef forward(self, *args, **kwargs):\n    return self.layout.forward(*args, **kwargs)\n\ndef get_hoisted_page(self, *args, **kwargs):\n    return self.layout.get_hoisted_page(*args, **kwargs)\n\ndef set_hoisted_page(self, *args, **kwargs):\n    return self.layout.set_hoisted_page(*args, **kwargs)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Wrapper for theme:",
"type":"text"
}
],
"id":"19a259c02d384479917bd03d8bd9a461",
"type":"text"
},
{
"id":"462c206fa45f45dfa98e3d8154775365",
"path":[
"rliterate.py",
"<<classes>>",
"<<Project>>"
],
"text":"def get_style(self, *args, **kwargs):\n    return self.theme.get_style(*args, **kwargs)\n",
"type":"code"
},
{
"fragments":[
{
"text":"Wrapper for theme:",
"type":"text"
}
],
"id":"41eddf3dbbad490391013abb3fbd0b47",
"type":"text"
},
{
"id":"a8697eb2058e418aa310a9dfbc11723c",
"path":[
"rliterate.py",
"<<classes>>",
"<<Project/__init__>>"
],
"text":"self._active_editor = None\n",
"type":"code"
},
{
"id":"d18b28ee44ea4fffbd9c2ecf75f0e938",
"path":[
"rliterate.py",
"<<classes>>",
"<<Project>>"
],
"text":"@property\ndef active_editor(self):\n    return self._active_editor\n\n@active_editor.setter\ndef active_editor(self, editor):\n    with self.notify(\"editor\"):\n        self._active_editor = editor\n",
"type":"code"
},
{
"id":"38c74c6da2a549778e32f4dba67151ac",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class EditInProgress(Exception):\n    pass\n",
"type":"code"
}
],
"title":"Project"
},
{
"children":[
{
"children":[],
"id":"56b835fee5b24f8a8e59156506ac6464",
"paragraphs":[
{
"id":"4c422e0326ee44c8ad863ee71d8d07b5",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class FileGenerator(object):\n\n    def __init__(self):\n        self.listener = Listener(lambda event: self._generate())\n\n    def set_document(self, document):\n        self.document = document\n        self.listener.set_observable(self.document)\n\n    def _generate(self):\n        self._parts = defaultdict(list)\n        self._collect_parts(self.document.get_page())\n        self._generate_files()\n\n    def _collect_parts(self, page):\n        for paragraph in page.paragraphs:\n            if paragraph.type == \"code\":\n                for line in paragraph.text.splitlines():\n                    self._parts[paragraph.path].append(line)\n        for child in page.children:\n            self._collect_parts(child)\n\n    def _generate_files(self):\n        for key in self._parts.keys():\n            filepath = self._get_filepath(key)\n            if filepath:\n                with open(filepath, \"w\") as f:\n                    self._render(f, key)\n\n    def _render(self, f, key, prefix=\"\"):\n        for line in self._parts[key]:\n            match = re.match(r\"^(\\s*)(<<.*>>)\\s*$\", line)\n            if match:\n                self._render(f, key + (match.group(2),), prefix=prefix+match.group(1))\n            else:\n                if len(line) > 0:\n                    f.write(prefix)\n                    f.write(line)\n                f.write(\"\\n\")\n\n    def _get_filepath(self, key):\n        if len(key) == 0:\n            return None\n        for part in key:\n            if part.startswith(\"<<\") and part.endswith(\">>\"):\n                return None\n        return os.path.join(*key)\n",
"type":"code"
}
],
"title":"Code files"
},
{
"children":[],
"id":"162d5b5c668d4c958c88b7d37e6f5d3e",
"paragraphs":[
{
"id":"1dc61da331924d68982c1a73b9fe1f02",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class HTMLBuilder(object):\n\n    def __init__(self, document, **options):\n        self.document = document\n        self.parts = []\n        self.generate_toc = options.get(\"generate_toc\", True)\n        self.toc_max_depth = options.get(\"toc_max_depth\", 3)\n\n    def build(self):\n        self.page(self.document.get_page())\n        return \"\".join(self.parts)\n\n    def toc(self, root_page, levels_left):\n        if levels_left > 0 and root_page.children:\n            with self.tag(\"ul\", newlines=False):\n                for page in root_page.children:\n                    with self.tag(\"li\"):\n                        with self.tag(\"a\", args={\"href\": \"#{}\".format(page.id)}):\n                            self.escaped(page.title)\n                        self.toc(page, levels_left - 1)\n\n    def page(self, page, level=1):\n        with self.tag(self.header_tag(level)):\n            with self.tag(\"a\", newlines=False, args={\"name\": page.id}):\n                pass\n            self.escaped(page.title)\n        for paragraph in page.paragraphs:\n            {\n                \"text\": self.paragraph_text,\n                \"quote\": self.paragraph_quote,\n                \"list\": self.paragraph_list,\n                \"code\": self.paragraph_code,\n                \"image\": self.paragraph_image,\n            }.get(paragraph.type, self.paragraph_unknown)(paragraph)\n        if level == 1 and self.generate_toc:\n            self.toc(page, self.toc_max_depth)\n        for child in page.children:\n            self.page(child, level+1)\n\n    def header_tag(self, level):\n        if level > 6:\n            return \"b\"\n        else:\n            return \"h{}\".format(level)\n\n    def paragraph_text(self, text):\n        with self.tag(\"p\"):\n            self.tokens(text.tokens)\n\n    def paragraph_quote(self, text):\n        with self.tag(\"blockquote\"):\n            self.tokens(text.tokens)\n\n    def paragraph_list(self, paragraph):\n        self.list(paragraph)\n\n    def list(self, a_list):\n        if a_list.children:\n            with self.tag({\"ordered\": \"ol\"}.get(a_list.child_type, \"ul\")):\n                for item in a_list.children:\n                    with self.tag(\"li\"):\n                        self.tokens(item.tokens)\n                        self.list(item)\n\n    def tokens(self, tokens):\n        for token in tokens:\n            {\n                TokenType.RLiterate.Emphasis: self.token_emphasis,\n                TokenType.RLiterate.Strong: self.token_strong,\n                TokenType.RLiterate.Code: self.token_code,\n                TokenType.RLiterate.Link: self.token_link,\n                TokenType.RLiterate.Reference: self.token_reference,\n            }.get(token.token_type, self.token_default)(token)\n\n    def token_emphasis(self, token):\n        with self.tag(\"em\", newlines=False):\n            self.escaped(token.text)\n\n    def token_strong(self, token):\n        with self.tag(\"strong\", newlines=False):\n            self.escaped(token.text)\n\n    def token_code(self, token):\n        with self.tag(\"code\", newlines=False):\n            self.escaped(token.text)\n\n    def token_link(self, token):\n        with self.tag(\"a\", args={\"href\": token.extra[\"url\"]}, newlines=False):\n            self.escaped(token.text)\n\n    def token_reference(self, token):\n        with self.tag(\"a\", args={\"href\": \"#{}\".format(token.extra[\"page_id\"])}, newlines=False):\n            with self.tag(\"em\", newlines=False):\n                self.escaped(token.text)\n\n    def token_default(self, token):\n        self.escaped(token.text)\n\n    def paragraph_code(self, code):\n        if code.has_path:\n            with self.tag(\"div\", args={\"class\": \"rliterate-code-header\"}):\n                with self.tag(\"p\", newlines=False):\n                    self.escaped(\" / \".join(code.path))\n        with self.tag(\"div\", args={\"class\": \"rliterate-code-body\"}):\n            with self.tag(\"pre\", newlines=False):\n                for token in code.tokens:\n                    with self.tag(\n                        \"span\",\n                        newlines=False,\n                        args={\"class\": pygments.token.STANDARD_TYPES.get(token.token_type, \"\")}\n                    ):\n                        self.escaped(token.text)\n\n    def paragraph_image(self, paragraph):\n        with self.tag(\"div\", args={\"class\": \"rliterate-image\"}):\n            with self.tag(\"img\", args={\n                \"src\": \"data:image/png;base64,{}\".format(paragraph.image_base64)\n            }):\n                pass\n        with self.tag(\"div\", args={\"class\": \"rliterate-image-text\"}):\n            with self.tag(\"p\"):\n                self.tokens(paragraph.tokens)\n\n    def paragraph_unknown(self, paragraph):\n        with self.tag(\"p\"):\n            self.escaped(\"Unknown paragraph...\")\n\n    @contextlib.contextmanager\n    def tag(self, tag, newlines=True, args={}):\n        args_string = \"\"\n        if args:\n            args_string = \" \" + \" \".join(\"{}=\\\"{}\\\"\".format(k, v) for k, v in args.items())\n        self.raw(\"<{}{}>\".format(tag, args_string))\n        yield\n        self.raw(\"</{}>\".format(tag))\n        if newlines:\n            self.raw(\"\\n\\n\")\n\n    def raw(self, text):\n        self.parts.append(text)\n\n    def escaped(self, text):\n        self.parts.append(xml.sax.saxutils.escape(text))\n",
"type":"code"
}
],
"title":"HTML"
},
{
"children":[],
"id":"427cb0d170a04b9898b5b744cd15b263",
"paragraphs":[
{
"fragments":[
{
"text":"This generates a file that is suitable for textual diffing.",
"type":"text"
}
],
"id":"324a5ebb37a44ec49c685670205356a5",
"type":"text"
},
{
"id":"7c76089d9db94d88b845c160fe2d249c",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class DiffBuilder(object):\n\n    def __init__(self, document):\n        self.document = document\n\n    def build(self):\n        self.parts = []\n        self._foo()\n        return \"\".join(self.parts)\n\n    def _foo(self):\n        self.pages = []\n        self._collect_pages(self.document.get_page())\n        self._render_pages()\n\n    def _collect_pages(self, page):\n        self.pages.append(page)\n        for child in page.children:\n            self._collect_pages(child)\n\n    def _render_pages(self):\n        for page in sorted(self.pages, key=lambda page: page.id):\n            self._write(page.id)\n            self._write(\": \")\n            self._write(page.title)\n            for child in page.children:\n                self._write(\"\\n\")\n                self._write(\"    \")\n                self._write(child.id)\n                self._write(\": \")\n                self._write(child.title)\n            self._write(\"\\n\\n\")\n            for paragraph in page.paragraphs:\n                {\n                    \"text\": self._render_text,\n                    \"quote\": self._render_quote,\n                    \"list\": self._render_list,\n                    \"code\": self._render_code,\n                }.get(paragraph.type, self._render_unknown)(paragraph)\n\n    def _render_text(self, text):\n        self._wrapped_text(text.text_version)\n\n    def _render_quote(self, paragraph):\n        self._wrapped_text(paragraph.text_version, indent=4)\n\n    def _render_list(self, paragraph):\n        self._write(paragraph.text_version)\n\n    def _wrapped_text(self, text, indent=0):\n        current_line = []\n        for part in text.replace(\"\\n\", \" \").split(\" \"):\n            if len(\" \".join(current_line)) > 60-indent:\n                self._write(\" \"*indent+\" \".join(current_line))\n                self._write(\"\\n\")\n                current_line = []\n            if part.strip():\n                current_line.append(part.strip())\n        if current_line:\n            self._write(\" \"*indent+\" \".join(current_line))\n            self._write(\"\\n\")\n        self._write(\"\\n\")\n\n    def _render_code(self, code):\n        self._write(\" / \".join(code.path)+\":\\n\\n\")\n        for line in code.text.splitlines():\n            self._write(\"    \"+line+\"\\n\")\n        self._write(\"\\n\")\n\n    def _render_unknown(self, paragraph):\n        self._write(\"Unknown type = \"+paragraph.type+\"\\n\\n\")\n\n    def _write(self, text):\n        self.parts.append(text)\n",
"type":"code"
}
],
"title":"Textual diffing"
}
],
"id":"63ff2f7abea44406922c78b7683e2dd3",
"paragraphs":[],
"title":"Generating output"
},
{
"children":[],
"id":"01aa28a581e84f088104c6cd600d9c1d",
"paragraphs":[
{
"id":"8f8ab8583e3744868ed12bfbd36c1090",
"path":[
"rliterate.py",
"<<base classes>>"
],
"text":"class Observable(object):\n\n    def __init__(self):\n        self._notify_count = 0\n        self._listeners = []\n\n    def listen(self, fn, *events):\n        self._listeners.append((fn, events))\n\n    def unlisten(self, fn, *events):\n        self._listeners.remove((fn, events))\n\n    @contextlib.contextmanager\n    def notify(self, event=\"\"):\n        self._notify_count += 1\n        try:\n            yield\n        finally:\n            self._notify_count -= 1\n            self._notify(event)\n\n    def notify_forwarder(self, prefix):\n        def forwarder(event):\n            self._notify(\"{}.{}\".format(prefix, event))\n        return forwarder\n\n    def _notify(self, event):\n        if self._notify_count == 0:\n            for fn, fn_events in self._listeners:\n                if self._is_match(fn_events, event):\n                    fn(event)\n\n    def _is_match(self, fn_events, event):\n        if len(fn_events) == 0:\n            return True\n        for fn_event in fn_events:\n            if is_prefix(fn_event.split(\".\"), event.split(\".\")):\n                return True\n        return False\n",
"type":"code"
},
{
"id":"56eaa5b767f44049b536742e79bd22ce",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def is_prefix(left, right):\n    return left == right[:len(left)]",
"type":"code"
},
{
"id":"bc097616885847ec889aa3b44a2af116",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class Listener(object):\n\n    def __init__(self, fn, *events):\n        self.fn = fn\n        self.events = events\n        self.observable = None\n\n    def set_observable(self, observable):\n        if self.observable is not None:\n            self.observable.unlisten(self.fn, *self.events)\n        self.observable = observable\n        self.observable.listen(self.fn, *self.events)\n        self.fn(\"\")\n",
"type":"code"
}
],
"title":"Publish subscribe mechanisms"
},
{
"children":[],
"id":"b73b797520334653a235e5e6a077e573",
"paragraphs":[
{
"id":"e9d4a6d5641f42c69cb2452d44bea386",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def load_json_from_file(path):\n    with open(path, \"r\") as f:\n        return json.load(f)\n",
"type":"code"
},
{
"id":"1d090bee1c344ef8872251856361d2be",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def write_json_to_file(path, data):\n    with safely_write_file(path) as f:\n        json.dump(\n            data, f,\n            sort_keys=True, indent=0, separators=(',', ':')\n        )\n",
"type":"code"
},
{
"fragments":[
{
"text":"This functions tries to write safely to a file. The file will either be completely written or not modified at all. It is achieved by first writing to a temporary file and then performing a rename.",
"type":"text"
}
],
"id":"650c09f63833430891ca9b67e3dd2db9",
"type":"text"
},
{
"id":"fb0a3d697605402caa3fa448c3b93b67",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"@contextlib.contextmanager\ndef safely_write_file(path):\n    with tempfile.NamedTemporaryFile(\n        dir=os.path.dirname(path),\n        prefix=os.path.basename(path) + \".tmp\",\n        delete=False\n    ) as tmp:\n        yield tmp\n    os.rename(tmp.name, path)",
"type":"code"
}
],
"title":"JSON serialization mechanisms"
},
{
"children":[],
"id":"b4d5859adcd8416fb3a9fc13b9329db8",
"paragraphs":[
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"History",
"type":"code"
},
{
"text":" class maintains a list of values. The current value can be changed with the ",
"type":"text"
},
{
"text":"back",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"forward",
"type":"code"
},
{
"text":" methods. This is used to implement undo/redo behavior.",
"type":"text"
}
],
"id":"b6c8fbcd8ba547cca74c2e7531dea043",
"type":"text"
},
{
"id":"93c4e5d9698b472abf0ddca35e897bc5",
"path":[
"rliterate.py",
"<<classes>>"
],
"text":"class History(object):\n\n    def __init__(self, initial_value, size=10):\n        self._history = [(\"\", initial_value)]\n        self._history_index = 0\n        self._new_history_entry = None\n        self._size = size\n\n    @property\n    def value(self):\n        return self._history[self._history_index][1]\n\n    @contextlib.contextmanager\n    def new_value(self, name=\"\"):\n        if self._new_history_entry is None:\n            self._new_history_entry = (name, copy.deepcopy(self.value))\n            yield self._new_history_entry[1]\n            self._history = self._history[:self._history_index+1]\n            self._history.append(self._new_history_entry)\n            self._history = self._history[-self._size:]\n            self._history_index = len(self._history) - 1\n            self._new_history_entry = None\n        else:\n            yield self._new_history_entry[1]\n\n    def can_back(self):\n        return self._history_index > 0\n\n    def back_name(self):\n        if self.can_back():\n            return self._history[self._history_index][0]\n\n    def back(self):\n        if self.can_back():\n            self._history_index -= 1\n\n    def can_forward(self):\n        return self._history_index < (len(self._history) - 1)\n\n    def forward_name(self):\n        return self._history[self._history_index+1][0]\n\n    def forward(self):\n        if self.can_forward():\n            self._history_index += 1\n",
"type":"code"
}
],
"title":"History"
},
{
"children":[],
"id":"fddc930e6caa4a38bf6e7259e6e1034a",
"paragraphs":[
{
"id":"9cb2e56cf6dc4a5f98fdbc5fcbdaa159",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def genid():\n    return uuid.uuid4().hex\n\n\ndef create_font(monospace=False, size=10, bold=False):\n    return wx.Font(\n        size,\n        wx.FONTFAMILY_TELETYPE if monospace else wx.FONTFAMILY_DEFAULT,\n        wx.FONTSTYLE_NORMAL,\n        wx.FONTWEIGHT_BOLD if bold else wx.FONTWEIGHT_NORMAL,\n        False\n    )\n\n\ndef find_first(items, action):\n    for item in items:\n        result = action(item)\n        if result is not None:\n            return result\n    return None\n\n\ndef pairs(items):\n    return zip(items, items[1:]+[None])\n\n\ndef min_or_none(items, key):\n    if not items:\n        return None\n    return min(items, key=key)\n\n\ndef index_with_id(items, item_id):\n    for index, item in enumerate(items):\n        if item[\"id\"] == item_id:\n            return index",
"type":"code"
},
{
"id":"45cbdbd53c2d4822b9f771ff5e786f55",
"path":[
"rliterate.py",
"<<functions>>"
],
"text":"def edit_in_gvim(text, filename):\n    with tempfile.NamedTemporaryFile(suffix=\"-rliterate-external-\"+filename) as f:\n        f.write(text)\n        f.flush()\n        p = subprocess.Popen([\"gvim\", \"--nofork\", f.name])\n        while p.poll() is None:\n            wx.Yield()\n            time.sleep(0.1)\n        f.seek(0)\n        return f.read()\n",
"type":"code"
}
],
"title":"Functions"
},
{
"children":[],
"id":"745dcf0d093a4f179dc7fbe1dc8b7bdd",
"paragraphs":[
{
"fragments":[
{
"text":"RLiterate ouputs one file for the program, one file for the test code, and a Makefile for various operations.",
"type":"text"
}
],
"id":"918c58768ee3442da6bc41cbeba8d211",
"type":"text"
},
{
"id":"93f40cf2b3364e0ca390f5cb0239ce0a",
"path":[
"rliterate.py"
],
"text":"# This file is automatically extracted from rliterate.rliterate.\n\n\nfrom collections import defaultdict\nimport contextlib\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\nimport tempfile\nimport time\nimport uuid\nimport webbrowser\nimport xml.sax.saxutils\nimport StringIO\nimport base64\nimport copy\n\nimport pygments.lexers\nimport pygments.token\nfrom pygments.token import Token as TokenType\nimport wx\nimport wx.richtext\nimport wx.lib.newevent\n\n\n<<constants>>\n<<base classes 1>>\n<<base classes>>\n<<classes>>\n<<functions>>\n\n\nif __name__ == \"__main__\":\n    if sys.argv[2:] == [\"--html\"]:\n        sys.stdout.write(HTMLBuilder(Document.from_file(sys.argv[1])).build())\n    elif sys.argv[2:] == [\"--diff\"]:\n        sys.stdout.write(DiffBuilder(Document.from_file(sys.argv[1])).build())\n    else:\n        app = wx.App()\n        main_frame = MainFrame(filepath=sys.argv[1])\n        main_frame.Show()\n        app.MainLoop()\n",
"type":"code"
},
{
"id":"35c0170810bd4f31987da0b5a2e947ba",
"path":[
"test_rliterate.py"
],
"text":"# This file is automatically extracted from rliterate.rliterate.\n\n\nimport pytest\n\nfrom rliterate import *\n\n\n@pytest.fixture\ndef tmpfile(tmpdir):\n    return str(tmpdir.join(\"test.rliterate\"))\n\n\n<<test cases>>\n",
"type":"code"
},
{
"id":"2ed62af3aae04c9395038d989826c4af",
"path":[
"Makefile"
],
"text":"# This file is automatically extracted from rliterate.rliterate.\n\n.PHONY: test\ntest:\n\tpy.test -vv\n\tpython rliterate.py rliterate.rliterate --diff > /dev/null\n\tpython rliterate.py rliterate.rliterate --html > /dev/null\n\n.PHONY: watch-test\nwatch-test:\n\tinotifywait -m -e close_write *rliterate.py 2>&1 | while read x; do tput reset && make test; done\n",
"type":"code"
}
],
"title":"Main files"
}
],
"id":"4d689acb540d40ecb8b828701bb5bf74",
"paragraphs":[
{
"fragments":[
{
"text":"RLiterate is implemented in Python. This chapter gives a complete description of all the code.",
"type":"text"
}
],
"id":"658e04c3d7394bca90f06344f85dfd24",
"type":"text"
}
],
"title":"Implementation"
},
{
"children":[],
"id":"cc36000ed12f4bfe88cefa2987fdb5cd",
"paragraphs":[
{
"fragments":[
{
"text":"DoDragDrop must be called from within an event handler. (Not custom event handler, but actually like mouse down?)",
"type":"text"
}
],
"id":"fda934bcd2ed4bb9b24a22fde654ded5",
"type":"text"
},
{
"fragments":[
{
"text":"Font must be assigned before setting a label, otherwise size calculations will be wrong? Must investigate further.",
"type":"text"
}
],
"id":"aea413d004a34a7b8afeb35129a82cb6",
"type":"text"
},
{
"fragments":[
{
"text":"sizer.AddSpacer adding space in both directions",
"type":"text"
}
],
"id":"9c3fa82371204ca6af17631545166854",
"type":"text"
}
],
"title":"Things I learned"
},
{
"children":[],
"id":"0a165f3042ee4350b9bebb61213b44c5",
"paragraphs":[
{
"fragments":[
{
"text":"Random notes of what I might want to work on in the future.",
"type":"text"
}
],
"id":"de3589c301134bd88a37a3836dfd330e",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Factory should drop right into edit mode when button is clicked?",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Highlighting of rows is not always up to date",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Should only expand first 3(?) levels when opening a file for the first time?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Extract page container component",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Table of contents",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Highlight object being dragged somehow (screenshot?)",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Hide dragged item?",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Invalid drop targets are still shown",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Drag and drop",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Figure out tab character automatically based on text",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Default to 4 spaces",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Tab/Shift+Tab/Backspace should indent/dedent smart",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Enter should keep indentation",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Only open code body editor when double clicked?",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Code editor",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Save when clicking outside editor text field? How to do this?",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"This is partially done, but it is quite messy. Not sure how to best proceed.",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Highlight the word/fragment that is double clicked?",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Editors",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Add page before/after",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Missing page operations",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"There is no way to control empty lines from placeholders",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Not possible to go to a page with Ctrl+T",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Spell checking",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"This is really a writing tool",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Right click should only be generated on up if first down",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Literate programming treats any target programming language as an assembly language",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Code can either be read in chunks or the final source output. And you can follow links between them.",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Reading tool",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Diff/Merge of RLiterate documents for collaboration?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Search and replace?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Highlight placeholders in code fragments ",
"type":"text"
},
{
"text":"<< .. >>",
"type":"code"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Show graph paragraph based on data paragraph defined earlier on the page (or on other page)",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Dynamic scripting",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"List code is messy (especially parsing)",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Make hoisted page a property? (Setter did not work well inside lambda)",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Constants for border calculations are tricky. Especially calculation of page width. How to make simpler?",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Sizer mixin?",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Handle sizer code with helper to make it cleaner?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Create more wx utility widgets to remove cruft.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Refactoring: split paragraph where clicked?",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Prose",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Monospace",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Title",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"TOC",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Fonts",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Keyboard shortcuts",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Allow configuration of",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Scroll column when dragging paragraphs so a drop can be made anywhere in a column?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Better explain \"architecture of drag and drop\"",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Make conversion functions between paragraph types more complete",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Warn if code chunks are not rendered to file",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Warn if reference does not exist anymore",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Warning system",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Can not drag image, must drag image text",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Image support",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Explain how code paragraphs enable literate programming (",
"type":"text"
},
{
"page_id":"6c34776183394824824be039e65de531",
"text":null,
"type":"reference"
},
{
"text":")",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"os.rename",
"type":"code"
},
{
"text":" does not work if file exists (",
"type":"text"
},
{
"page_id":"b73b797520334653a235e5e6a077e573",
"text":null,
"type":"reference"
},
{
"text":")",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Scrolling a column up/down works differently (",
"type":"text"
},
{
"page_id":"94b57547a194415cb00feb2aaf486e27",
"text":null,
"type":"reference"
},
{
"text":")",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Hovering a row in the toc does not highlight it",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Issues noted when testing on Windows",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Monospace inline text is rendered at incorrect height (baseline is not the same) (",
"type":"text"
},
{
"page_id":"f2fd8440f526447fbcd4442951435021",
"text":null,
"type":"reference"
},
{
"text":")",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Probably incorrect usage of ",
"type":"text"
},
{
"text":"GetWheelRotation",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"GetWheelDelta",
"type":"code"
}
]
}
],
"fragments":[
{
"text":"Scrolling feels weird (",
"type":"text"
},
{
"page_id":"94b57547a194415cb00feb2aaf486e27",
"text":null,
"type":"reference"
},
{
"text":")",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"\"",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"'",
"type":"code"
},
{
"text":" is replaced when writing code in textbox",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"defResult",
"type":"code"
},
{
"text":" is never ",
"type":"text"
},
{
"text":"wx.DragMove",
"type":"code"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Program segfaults if that clause is removed and drop is done",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Drag and drop does not work (",
"type":"text"
},
{
"page_id":"1d623dc7a566477786012227b9790d81",
"text":null,
"type":"reference"
},
{
"text":")",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Main window size is too small (had to resize to bigger all the time)",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Issues when testing on OSX",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Highlight code without specifying filename?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Link templates ",
"type":"text"
},
{
"text":"[[wxdoc:Sizer]]",
"type":"code"
},
{
"text":"?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Render an index of all code sections?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"HTML output should have ",
"type":"text"
},
{
"text":"<a name=...",
"type":"code"
},
{
"text":" for all pages ",
"type":"text"
},
{
"text":"and",
"type":"strong"
},
{
"text":" paragraphs",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Styled text control should not need a constant width?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Decouple styled text control from RLiterate internals?",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Need a way to \"connect\" variables",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Base it on pygments syntax?",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Keep a list of variables so than renames can easily be done",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Backreferences: what pages link here?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Where is ",
"type":"text"
},
{
"text":"copy.deepcopy",
"type":"code"
},
{
"text":" needed? It should be an implementation detail.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Can check if editor opened be more isolated?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Tool button to create new / open document",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Render ids (page reference, variable reference) with short version in editor",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Editor eats last newline character",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Listeners always get notified. It is there job to figure out if action is needed.",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"Simplify notification system",
"type":"text"
}
]
}
],
"id":"334a278ca527447482c3059353cfed4f",
"type":"list"
}
],
"title":"TODO"
}
],
"id":"956ae4613f144e3581d420995a7ef046",
"paragraphs":[
{
"fragments":[
{
"text":"RLiterate is a tool for authoring documents. You can think of it as a programmer's version of a word processor. This book describes RLiterate and also includes the complete implementation of the program.",
"type":"text"
}
],
"id":"ac1a9e2eb407424ca16713de927e0796",
"type":"text"
},
{
"fragments":[
{
"text":"Screenshot of RLiterate editing itself.",
"type":"text"
}
],
"id":"9260006ecbe44867bff40e0b7220b353",
"image_base64":"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",
"type":"image"
}
],
"title":"RLiterate"
}