WxGuiCodeGenerator {
  file = [ast*:xs] -> { xs }
  ast =
    | ["panel" .:name ast:x] -> {
      %%handlers
      %%widget
      %%parent
      "class " name "(wx.Panel, GuiFrameworkBaseMixin):\n" >
        "def __init__(self, parent, **kwargs):\n" >
          "wx.Panel.__init__(self, parent)\n"
          "GuiFrameworkBaseMixin.__init__(self, **kwargs)\n"
        <
        "def _get_derived(self):\n" >
          "return {\n" > #derived < "}\n"
        <
        "def _create_gui(self):\n" >
          %handlers " = []\n"
          "self." %widget " = self\n"
          "self." %parent " = self\n"
          #create
          "for handler in " %handlers ":\n" >
            "self." %widget ".listen(*handler)\n"
          <
        <
        "def _update_gui(self):\n" >
          "pass\n"
          #update
        <
        x
      <
    }
    | ["body" [ast*:xs] ast:y [ast*:zs]] -> { xs y zs }
    | [boxType:x ast*:ys] -> {
      %%sizer
      @create {
        "self." %sizer " = wx.BoxSizer(" x ")\n"
        "if self." %parent ".Sizer is None:\n" >
          "self." %parent ".Sizer = self." %sizer "\n"
        <
      }
      ys
    }
    | ["child" .:x binding:y [ast*:zs] [ast*:ws]] -> {
      %%handlers
      %%createVars
      %%updateVars
      %%sizerFlag
      %%sizerBorder
      %%sizerProportion
      @create {
        %handlers " = []\n"
        %createVars " = {}\n"
        %sizerFlag " = 0\n"
        %sizerBorder " = 0\n"
        %sizerProportion " = 0\n"
      }
      @update {
        %updateVars " = {}\n"
      }
      zs
      %%widget
      @create {
        "self." %widget " = " x "(self." %parent ", **" %createVars ")\n"
        "self." %sizer ".Add(self." %widget ", flag=" %sizerFlag ", border=" %sizerBorder ", proportion=" %sizerProportion ")\n"
        "for handler in " %handlers ":\n" >
          "self." %widget ".listen(*handler)\n"
        <
        y
      }
      @update {
        "self." %widget ".UpdateGui(**" %updateVars ")\n"
      }
      %%parent
      @create {
        "self." %parent " = self." %widget "\n"
      }
      ws
    }
    | ["boxspace" ast:x] -> {
      %%sizeritem
      @create {
        "self." %sizeritem " = self." %sizer ".Add(self._get_space_size(self." %sizer ", " x "))\n"
      }
      @update {
        "self." %sizeritem ".SetMinSize(self._get_space_size(self." %sizer ", " x "))\n"
      }
    }
    | ["loop" ast:x .:y ast*:zs] -> {
      %%loop
      @create {
        "self._items_" %loop " = []\n"
        "def create_" %loop "(" y "):\n" >
          "pass\n"
      }
      @update {
        "def update_" %loop "(" y "):\n" >
          "pass\n"
      }
      zs
      @create {
        <
        "for loopitem in " x ":\n" >
          "self._items_" %loop ".append(create_" %loop "(loopitem))\n"
        <
      }
      @update {
        <
        "index = -1\n" >
        "for index, loopitem in enumerate(" x "):\n" >
          "if index < len(self._items_" %loop "):\n" >
            "self._items_" %loop "[index].update_somehow()\n"
          < "else:\n" >
            "self._items_" %loop ".append(create_" %loop "(loopitem))\n"
          <
        <
      }
    }
    | ["parameter" .:x ast:y] -> {
      @create { %createVars "[" repr(x) "] = " y "\n" }
      @update { %updateVars "[" repr(x) "] = " y "\n" }
    }
    | ["handler" .:x ast:y] -> {
      @create { %handlers ".append((" repr(x) ", lambda event: " y "))\n" }
    }
    | ["get" astGetList:x] -> { x }
    | ["call" ast:x astList:y] -> { x "(" y ")" }
    | ["name" .:x] -> { x }
    | ["variable" .:x] -> {
        "@property\n"
        "def " x "(self):\n" >
          "return self.values[\"" x "\"]\n"
        <
      }
    | ["derived" .:x ast:y] -> {
        @derived { repr(x) ": " y ",\n" }
      }
    | ["string" .:x] -> { repr(x) }
    | ["int" .:x] -> { repr(x) }
    | ["sizerBorder" ast:x [border*:y]] -> { @create { %sizerBorder " = " x "\n" y } }
    | ["sizerProportion" ast:x]         -> { @create { %sizerProportion " = " x "\n" } }
    | ["sizerExpand"]                   -> { @create { %sizerFlag " |= wx.EXPAND\n" } }
    | ["sizerReserve"]                  -> { @create { %sizerFlag " |= wx.RESERVE_SPACE_EVEN_IF_HIDDEN\n" } }
  border =
    | "ALL"    -> { %sizerFlag " |= wx.ALL\n" }
    | "LEFT"   -> { %sizerFlag " |= wx.LEFT\n" }
    | "RIGHT"  -> { %sizerFlag " |= wx.RIGHT\n" }
    | "TOP"    -> { %sizerFlag " |= wx.TOP\n" }
    | "BOTTOM" -> { %sizerFlag " |= wx.BOTTOM\n" }
  boxType =
    | "hbox" -> "wx.HORIZONTAL"
    | "vbox" -> "wx.VERTICAL"
  astGetList =
    | ast:x astGetList:y -> { x "." y }
    | ast
  astList = astEmptyList | astNonEmptyList
  astEmptyList = !. -> {}
  astNonEmptyList =
    | ast:x astNonEmptyList:y -> { x ", " y }
    | ast:x
  binding =
    | ["binding" .:x] -> { "self." x " = self." %widget "\n" }
    | .               -> {}
}
